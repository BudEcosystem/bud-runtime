name: PR Checks

on:
  merge_group:
  pull_request:
    branches: ["main"]

env:
  FORCE_COLOR: 1
  TENSORZERO_CLICKHOUSE_URL: "http://chuser:chpassword@localhost:8123/tensorzero"

jobs:
  clickhouse-tests-cloud:
    if: github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cloud_instance:
          - release_channel: regular
            url_secret: CLICKHOUSE_CLOUD_URL
          - release_channel: fast
            url_secret: CLICKHOUSE_CLOUD_FAST_CHANNEL_URL
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6
        with:
          cache-provider: "buildjet"
          save-if: ${{ github.event_name == 'merge_group' }}
          
      - name: Cache cargo bin directory
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-tools-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-tools-${{ runner.os }}-
            
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsasl2-dev
          
      - name: Install cargo-nextest
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo install cargo-nextest --version 0.9.100 --locked || echo "cargo-nextest already installed"
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Set up TENSORZERO_CLICKHOUSE_URL
        run: |
          echo "TENSORZERO_CLICKHOUSE_URL=${{ secrets[matrix.cloud_instance.url_secret] }}" >> $GITHUB_ENV

      - name: Wake up ClickHouse cloud
        run: |
          curl $TENSORZERO_CLICKHOUSE_URL --data-binary 'SHOW DATABASES'

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/0.6.17/install.sh | sh

      - name: Download ClickHouse fixtures
        run: uv run ./ui/fixtures/download-fixtures.py

      - name: Delete old ClickHouse cloud dbs
        run: ./ci/delete-clickhouse-dbs.sh

      # We run this as a separate step so that we can see live build logs
      # (and fail the job immediately if the build fails)
      - name: Build the gateway for E2E tests
        run: cargo build-e2e

      - name: Launch the gateway for E2E tests
        run: |
          cargo run-e2e > e2e_logs.txt 2>&1 &
            count=0
            max_attempts=30
            while ! curl -s -f http://localhost:3000/health >/dev/null 2>&1; do
              echo "Waiting for gateway to be healthy..."
              sleep 1
              count=$((count + 1))
              if [ $count -ge $max_attempts ]; then
                echo "Gateway failed to become healthy after $max_attempts attempts"
                exit 1
              fi
            done
          echo "GATEWAY_PID=$!" >> $GITHUB_ENV

      - name: Test (Rust)
        # This test causes a huge slowdown on ClickHouse cloud, even though it uses a fresh database
        # For now, let's skip it (we still run it in the local docker ClickHouse tests)
        # See https://github.com/tensorzero/tensorzero/issues/2216
        # Also, `test_clickhouse_migration_manager` is consistently taking a very long time (and timing out)
        # on the fast release channel, so we temporarily skip it
        run: |
          if [ "${{ matrix.cloud_instance.release_channel }}" = "fast" ]; then
            cargo test-e2e-no-creds -- --skip test_concurrent_clickhouse_migrations --skip test_clickhouse_migration_manager
          else
            cargo test-e2e-no-creds -- --skip test_concurrent_clickhouse_migrations
          fi

      - name: Print e2e logs
        if: always()
        run: cat e2e_logs.txt

  validate:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      # We deliberately install our MSRV here (rather than 'stable') to ensure that everything compiles with that version
      - name: Install Rust 1.85.0
        run: |
          rustup install 1.85.0 --component clippy,rustfmt
          rustup default 1.85.0

      - name: Print Rust version
        run: rustc --version
        
      - name: Cache cargo bin directory
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-tools-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-tools-${{ runner.os }}-
            
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsasl2-dev
          
      - name: Install cargo-nextest, cargo-deny, and cargo-hack
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo install cargo-nextest --version 0.9.100 --locked || echo "cargo-nextest already installed"
          cargo install cargo-deny --locked || echo "cargo-deny already installed"
          cargo install cargo-hack --locked || echo "cargo-hack already installed"
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Build (Rust)
        run: cargo build --workspace --verbose

      - name: Lint (Rust)
        run: |
          cargo fmt -- --check
          cargo hack clippy --all-targets --each-feature -- -D warnings

      - name: Run cargo-deny
        run: cargo deny check

      - name: Test (Rust)
        run: |
          cargo test-unit ${{ vars.CARGO_NEXTEST_EXTRA_ARGS }}


  clickhouse-tests:
    # We don't run many tests here, so use a normal runner with Github Actions caching
    # to avoid unnecessarily using Namespace credits (it should still always finish before
    # the main 'validate' job)
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.clickhouse_version.allow_failure }}
    strategy:
      matrix:
        clickhouse_version:
          - tag: "25.2-alpine"
            prefix: "25.2"
            allow_failure: false
          - tag: "latest-alpine"
            prefix: ""
            # ClickHouse can make new releases at any time, which might break our tests.
            # We allow this job to fail to avoid blocking CI whenever this happens.
            # However, we'll still want to fix the failing tests soon after we notice the failure
            allow_failure: true

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6
        with:
          cache-provider: "buildjet"
          save-if: ${{ github.event_name == 'merge_group' }}
      - run: df -h
      # ClickHouse intermittently runs out of disk space on the `ubuntu-latest` runner
      # I'm using the commands from https://carlosbecker.com/posts/github-actions-disk-space/ to try to get more disk space
      - name: "Free up disk space"
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL

      - name: Cache cargo bin directory
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-tools-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-tools-${{ runner.os }}-

      - run: df -h
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsasl2-dev
          
      - name: Install cargo-nextest
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo install cargo-nextest --version 0.9.100 --locked || echo "cargo-nextest already installed"
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/0.6.17/install.sh | sh

      - name: Download ClickHouse fixtures
        run: uv run ./ui/fixtures/download-fixtures.py

      - name: Set up TENSORZERO_CLICKHOUSE_URL for E2E tests
        run: |
          echo "TENSORZERO_CLICKHOUSE_URL=http://chuser:chpassword@localhost:8123/tensorzero_e2e_tests" >> $GITHUB_ENV

      - name: Launch ClickHouse container for E2E tests
        run: TENSORZERO_CLICKHOUSE_VERSION=${{ matrix.clickhouse_version.tag }} docker compose -f tensorzero-internal/tests/e2e/docker-compose.yml up clickhouse --wait

      # Make an HTTP request to ClickHouse and check that the version matches '${{ matrix.clickhouse_version }}'
      - name: Check ClickHouse version
        run: |
          CLICKHOUSE_VERSION=$(curl -s "http://localhost:8123/query?user=chuser&password=chpassword" --data-binary "SELECT version()")
          echo "Detected ClickHouse version: $CLICKHOUSE_VERSION"
          echo "$CLICKHOUSE_VERSION" | grep -q "${{ matrix.clickhouse_version.prefix }}" || echo "WARNING: ClickHouse version does not match expected ${{ matrix.clickhouse_version.prefix }}"

      # We run this as a separate step so that we can see live build logs
      # (and fail the job immediately if the build fails)
      - name: Build the gateway for E2E tests
        run: cargo build-e2e

      - name: Launch the gateway for E2E tests
        run: |
          cargo run-e2e > e2e_logs.txt 2>&1 &
            count=0
            max_attempts=10
            while ! curl -s -f http://localhost:3000/health >/dev/null 2>&1; do
              echo "Waiting for gateway to be healthy..."
              sleep 1
              count=$((count + 1))
              if [ $count -ge $max_attempts ]; then
                echo "Gateway failed to become healthy after $max_attempts attempts"
                exit 1
              fi
            done
          echo "GATEWAY_PID=$!" >> $GITHUB_ENV

      - name: Test (Rust)
        run: cargo test-e2e-no-creds

      - name: Print e2e logs
        if: always()
        run: cat e2e_logs.txt

  build-gateway-container:
    uses: ./.github/workflows/build-gateway-container.yml

  sdk-integration-tests:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6
        with:
          cache-provider: "buildjet"
          save-if: ${{ github.event_name == 'merge_group' }}
          
      - name: Cache cargo bin directory
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-tools-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-tools-${{ runner.os }}-
            
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsasl2-dev
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Create .env file for SDK tests
        run: |
          cd gateway/tests/sdk
          echo "TENSORZERO_BASE_URL=http://localhost:3001" > .env
          echo "OPENAI_API_KEY=dummy-key-for-testing" >> .env
          
      - name: Build the gateway for SDK tests
        run: cargo build --release --bin gateway --features e2e_tests
        
      - name: Launch the gateway for SDK tests
        run: |
          cargo run --release --bin gateway --features e2e_tests -- --config-file gateway/tests/sdk/test_config_unified_ci.toml > sdk_gateway_logs.txt 2>&1 &
          GATEWAY_PID=$!
          echo "GATEWAY_PID=$GATEWAY_PID" >> $GITHUB_ENV
          
          # Wait for gateway to be healthy
          count=0
          max_attempts=30
          while ! curl -s -f http://localhost:3001/health >/dev/null 2>&1; do
            echo "Waiting for gateway to be healthy..."
            sleep 1
            count=$((count + 1))
            if [ $count -ge $max_attempts ]; then
              echo "Gateway failed to become healthy after $max_attempts attempts"
              cat sdk_gateway_logs.txt
              exit 1
            fi
          done
          echo "Gateway is healthy and ready for SDK tests"
          
      - name: Run SDK integration tests
        run: |
          cd gateway/tests/sdk
          # Run all CI tests including universal SDK tests
          ./run_tests.sh --mode ci
          
      - name: Run Universal SDK compatibility tests
        run: |
          cd gateway/tests/sdk
          # Run universal SDK tests specifically
          ./run_tests.sh --provider universal
          
      - name: Print gateway logs
        if: always()
        run: cat sdk_gateway_logs.txt
        
      - name: Cleanup gateway process
        if: always()
        run: |
          if [ ! -z "$GATEWAY_PID" ]; then
            kill $GATEWAY_PID || true
          fi

  performance-test:
    # Run performance tests to detect regressions
    runs-on: ubuntu-latest
    # This job is now blocking - PR will fail if P99 latency exceeds 1.5ms
    continue-on-error: false
    
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          # We need the full history to fetch the baseline from main
          fetch-depth: 0
          
      - uses: dtolnay/rust-toolchain@stable
      
      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6
        with:
          cache-provider: "github"
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsasl2-dev jq netcat-openbsd
          
      - name: Install vegeta
        run: |
          wget https://github.com/tsenart/vegeta/releases/download/v12.11.1/vegeta_12.11.1_linux_amd64.tar.gz
          tar xzf vegeta_12.11.1_linux_amd64.tar.gz
          sudo mv vegeta /usr/local/bin/
          vegeta -version
          
      - name: Build for performance test
        run: |
          # Use release profile in CI for faster builds
          cargo build --release --bin gateway --bin mock-inference-provider
          
      - name: Run performance test
        run: |
          ./ci/performance/run-performance-test-ci.sh
          
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ github.sha }}
          path: performance-results.json
          retention-days: 30
          
      - name: Download baseline performance results
        id: baseline
        continue-on-error: true
        run: |
          # Try to download the most recent performance results from main
          gh run list \
            --branch main \
            --workflow pr.yaml \
            --status success \
            --limit 10 \
            --json databaseId,conclusion \
            --jq '.[] | select(.conclusion=="success") | .databaseId' | \
          while read -r run_id; do
            echo "Checking run $run_id for performance artifacts..."
            if gh run download "$run_id" \
              --name "performance-results-*" \
              --dir baseline-results 2>/dev/null; then
              echo "Found baseline results from run $run_id"
              # Find the downloaded file
              BASELINE_FILE=$(find baseline-results -name "performance-results.json" -type f | head -1)
              if [ -n "$BASELINE_FILE" ]; then
                cp "$BASELINE_FILE" baseline-performance.json
                echo "baseline_found=true" >> $GITHUB_OUTPUT
                break
              fi
            fi
          done
        env:
          GH_TOKEN: ${{ github.token }}
          
      - name: Compare performance results
        if: steps.baseline.outputs.baseline_found == 'true'
        id: compare
        continue-on-error: true
        run: |
          python ci/performance/compare-performance.py baseline-performance.json performance-results.json > performance-report.md
          COMPARISON_EXIT_CODE=$?
          
          # Save the report
          cat performance-report.md
          
          # Set output for PR comment
          {
            echo 'report<<EOF'
            cat performance-report.md
            echo 'EOF'
          } >> $GITHUB_OUTPUT
          
          exit $COMPARISON_EXIT_CODE
          
      - name: Comment PR with performance results
        if: github.event_name == 'pull_request' && steps.baseline.outputs.baseline_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const report = `${{ steps.compare.outputs.report }}`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 📊 Performance Test Results')
            );
            
            const commentBody = report || '## 📊 Performance Test Results\n\n⚠️ Performance comparison failed. Check the workflow logs for details.';
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody,
              });
            }


  # See 'ci/README.md' at the repository root for more details.
  check-all-general-jobs-passed:
    if: always()
    needs:
      [
        clickhouse-tests-cloud,
        validate,
        clickhouse-tests,
        sdk-integration-tests,
        performance-test
      ]
    runs-on: ubuntu-latest
    steps:
      - if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: exit 1
