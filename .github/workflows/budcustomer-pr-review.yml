name: "BudCustomer: PR Review"

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'services/budCustomer/**'

env:
  NODE_VERSION: "20"

jobs:
  budcustomer-bumper:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Run BudCustomer Bumper
        run: nix run .#workflow_budcustomer_bumper

  lint:
    name: Lint and TypeScript Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./services/budCustomer

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            ~/.pnpm-store
            **/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: |
          npm config set registry https://registry.npmjs.org/
          pnpm install --frozen-lockfile --prefer-offline
        env:
          HUSKY: 0

      - name: Run ESLint
        run: |
          echo "::group::Running ESLint"
          pnpm run lint
          echo "::endgroup::"

      - name: Run TypeScript type checking
        run: |
          echo "::group::Running TypeScript type check"
          pnpm run typecheck
          echo "::endgroup::"

  build:
    needs: [budcustomer-bumper]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main
    - name: Setup Nix Cache
      uses: DeterminateSystems/magic-nix-cache-action@main
    - name: Run Nix Workflow
      run: nix build .#budcustomer

  dependency-check:
    name: Check Dependencies
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./services/budCustomer

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            ~/.pnpm-store
            **/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: |
          npm config set registry https://registry.npmjs.org/
          pnpm install --frozen-lockfile --prefer-offline
        env:
          HUSKY: 0

      - name: Run pnpm audit
        run: |
          echo "::group::Checking for vulnerable dependencies"
          pnpm audit --audit-level=moderate
          echo "::endgroup::"

      - name: Check for outdated dependencies
        run: |
          echo "::group::Checking for outdated dependencies"
          pnpm outdated || true
          echo "::endgroup::"

  pr-status:
    name: PR Review Status
    runs-on: ubuntu-latest
    needs: [lint, build, dependency-check]
    if: always()

    steps:
      - name: Check job results
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" ]]; then
            echo "❌ Lint and TypeScript check failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ Build failed"
            exit 1
          fi
          if [[ "${{ needs.dependency-check.result }}" == "failure" ]]; then
            echo "❌ Dependency check failed"
            exit 1
          fi
          echo "✅ All checks passed!"
