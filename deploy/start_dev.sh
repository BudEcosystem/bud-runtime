#!/usr/bin/env bash

#
#  -----------------------------------------------------------------------------
#  Copyright (c) 2024 Bud Ecosystem Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#  -----------------------------------------------------------------------------
#

APP_NAME=
REDIS_PASSWORD=
APP_PORT=9081
DAPR_HTTP_PORT=3510
DAPR_GRPC_PORT=50001
DAPR_API_TOKEN=$(openssl rand 16 | base64)
NAMESPACE="development"
LOG_LEVEL="DEBUG"
CONFIGSTORE_NAME="configstore"
SECRETSTORE_NAME="secretstore-local"
DAPR_COMPONENTS="../.dapr/components/"
DAPR_APP_CONFIG="../.dapr/appconfig-dev.yaml"

DOCKER_COMPOSE_FILE="./deploy/docker-compose-dev.yaml"
BUILD_FLAG=""
DETACH_FLAG=""

# Mongo DB
MONGO_INITDB_ROOT_USERNAME="root"
MONGO_INITDB_ROOT_PASSWORD="secret"
export MONGO_INITDB_ROOT_USERNAME MONGO_INITDB_ROOT_PASSWORD

# notify application
ENABLE_PROFILER=true
export ENABLE_PROFILER

function display_help() {
    echo "Usage: $0 [options]"
    echo
    echo "Options:"
    echo "  --app-name               Set the application name. This name should match your python module name and will be used as the app id for dapr."
    echo "  --redis-password         Set the Redis password (default: $REDIS_PASSWORD). Only required when the redis compose is included as well."
    echo "  --app-port               Set the application port (default: $APP_PORT)"
    echo "  --dapr-http-port         Set the Dapr HTTP port (default: $DAPR_HTTP_PORT)"
    echo "  --dapr-grpc-port         Set the Dapr gRPC port (default: $DAPR_GRPC_PORT)"
    echo "  --dapr-api-token         Set the Dapr API token (default: autogenerated)"
    echo "  --namespace              Set the deployment environment (default: $NAMESPACE)"
    echo "  --log-level              Set the log level (default: $LOG_LEVEL)"
    echo "  --configstore-name       Set the config store name (default: $CONFIGSTORE_NAME)"
    echo "  --secretstore-name       Set the secret store name (default: $SECRETSTORE_NAME)"
    echo "  --dapr-components        Set the dapr components folder path, this should be relative to the deploy directory (default: $DAPR_COMPONENTS)"
    echo "  --dapr-app-config        Set the dapr app config path, this should be relative to the deploy directory (default: $DAPR_APP_CONFIG)"
    echo "  -f FILE                  Specify the Docker Compose file to use, this should be relative to your current directory (default: $DOCKER_COMPOSE_FILE)"
    echo "  --build                  Include this flag to force a rebuild of the Docker containers"
    echo "  -d                       Include this flag to detach and run the containers in background"
    echo "  --help                   Display this help message and exit"
    echo
    echo "Example:"
    echo "  $0 -f docker-compose-local.yaml --app-name pyguard --build"
    echo "  This will use 'docker-compose-local.yaml' and force a rebuild of the containers."
    echo
    exit 0
}

# Parse arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --app-name) APP_NAME="$2"; shift ;;
        --redis-password) REDIS_PASSWORD="$2"; shift ;;
        --app-port) APP_PORT="$2"; shift ;;
        --dapr-http-port) DAPR_HTTP_PORT="$2"; shift ;;
        --dapr-grpc-port) DAPR_GRPC_PORT="$2"; shift ;;
        --dapr-api-token) DAPR_API_TOKEN="$2"; shift ;;
        --namespace) NAMESPACE="$2"; shift ;;
        --log-level) LOG_LEVEL="$2"; shift ;;
        --configstore-name) CONFIGSTORE_NAME="$2"; shift ;;
        --secretstore-name) SECRETSTORE_NAME="$2"; shift ;;
        --dapr-components) DAPR_COMPONENTS="$2"; shift ;;
        --dapr-app-config) DAPR_APP_CONFIG="$2"; shift ;;
        -f) DOCKER_COMPOSE_FILE="$2"; shift ;;
        --build) BUILD_FLAG="--build" ;;
        -d) DETACH_FLAG="-d" ;;
        --help) display_help ;;
        *) echo "Unknown parameter passed: $1"; show_help; exit 1 ;;
    esac
    shift
done

: ${APP_NAME:?Application name is required, use --app-name flag to specify the name.}

# Export the environment variables
export APP_NAME REDIS_PASSWORD APP_PORT DAPR_HTTP_PORT DAPR_GRPC_PORT DAPR_API_TOKEN NAMESPACE LOG_LEVEL CONFIGSTORE_NAME SECRETSTORE_NAME DAPR_COMPONENTS DAPR_APP_CONFIG

# Print the environment variables
echo "****************************************************"
echo "*                                                  *"
echo "*         Starting Microservice Environment        *"
echo "*                                                  *"
echo "****************************************************"
echo ""
echo "üõ† App Name            : $APP_NAME"
echo "üîë Redis Password      : $REDIS_PASSWORD"
echo "üåê App Port            : $APP_PORT"
echo "üåç Dapr HTTP Port      : $DAPR_HTTP_PORT"
echo "üåç Dapr gRPC Port      : $DAPR_GRPC_PORT"
echo "üîí Dapr API Token       : $DAPR_API_TOKEN"
echo "üõ† Namespace           : $NAMESPACE"
echo "üìä Log Level           : $LOG_LEVEL"
echo "üóÇ Config Store Name   : $CONFIGSTORE_NAME"
echo "üîê Secret Store Name   : $SECRETSTORE_NAME"
echo "üõ† Dapr Components     : $DAPR_COMPONENTS"
echo "üõ† Dapr App Config     : $DAPR_APP_CONFIG"
echo "üõ† Docker Compose File : $DOCKER_COMPOSE_FILE"
echo "üöÄ Build flag          : $BUILD_FLAG"
echo ""
echo "****************************************************"

# Bring up Docker Compose
echo "Bringing up Docker Compose with file: $DOCKER_COMPOSE_FILE"
docker compose -f "$DOCKER_COMPOSE_FILE" up $BUILD_FLAG $DETACH_FLAG