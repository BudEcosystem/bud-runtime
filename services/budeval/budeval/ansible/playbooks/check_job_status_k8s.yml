---
- name: Check Kubernetes Job Status
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    kubeconfig_path: ""
    namespace: "default"
    job_names: ""  # Comma-separated job names
    temp_id: ""

  tasks:
    - name: Ensure required variables are provided
      ansible.builtin.assert:
        that:
          - namespace is defined
          - namespace | length > 0
          - job_names is defined
          - job_names | length > 0
          - temp_id is defined
          - temp_id | length > 0
        fail_msg: "namespace, job_names, and temp_id must be provided"

    - name: Split job names into list
      ansible.builtin.set_fact:
        job_list: "{{ job_names.split(',') }}"

    - name: Initialize results dictionary
      ansible.builtin.set_fact:
        job_statuses: {}

    - name: Check each job status
      kubernetes.core.k8s_info:
        api_version: batch/v1
        kind: Job
        name: "{{ item }}"
        namespace: "{{ namespace }}"
        kubeconfig: "{{ kubeconfig_path if kubeconfig_path else omit }}"
      register: job_info
      loop: "{{ job_list }}"
      ignore_errors: true

    - name: Process job statuses
      ansible.builtin.set_fact:
        job_statuses: >-
          {{
            job_statuses | combine({
              item.item: {
                'status': 'Succeeded' if (item.resources[0].status.succeeded | default(0)) > 0
                         else 'Failed' if (item.resources[0].status.failed | default(0)) > 0
                         else 'Running' if (item.resources[0].status.active | default(0)) > 0
                         else 'Pending',
                'active': item.resources[0].status.active | default(0),
                'succeeded': item.resources[0].status.succeeded | default(0),
                'failed': item.resources[0].status.failed | default(0),
                'startTime': item.resources[0].status.startTime | default(''),
                'completionTime': item.resources[0].status.completionTime | default(''),
                'message': item.resources[0].status.conditions[0].message | default('') if item.resources[0].status.conditions is defined else ''
              }
            })
          }}
      loop: "{{ job_info.results }}"
      when: item.resources | length > 0

    - name: Write results to temporary file
      ansible.builtin.copy:
        content: "{{ job_statuses | to_nice_json }}"
        dest: "/tmp/job_status_{{ temp_id }}.json"
