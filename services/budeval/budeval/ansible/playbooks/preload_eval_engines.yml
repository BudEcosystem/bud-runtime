---
- name: Preload Evaluation Engine Docker Images
  hosts: localhost
  gather_facts: false
  vars:
    # Variables should be passed as extra_vars, these are just fallbacks
    namespace_default: "budeval"
    engine_images_default: []

  tasks:
    - name: Set variables with defaults
      set_fact:
        target_namespace: "{{ namespace | default(namespace_default) }}"
        target_engines: "{{ engine_images | default(engine_images_default) }}"
        kube_config: "{{ kubeconfig_path | default('') }}"
        in_cluster: "{{ use_in_cluster_config | default(false) }}"

    - name: Display engine preloading information
      debug:
        msg: |
          Starting engine preloading process
          Namespace: {{ target_namespace }}
          Number of engines to preload: {{ target_engines | length }}
          Engines: {{ target_engines | map(attribute='name') | list }}
          Using kubeconfig: {{ kube_config != '' }}

    - name: Check if engines are already preloaded
      kubernetes.core.k8s_info:
        api_version: v1
        kind: ConfigMap
        name: preloaded-engines
        namespace: "{{ target_namespace }}"
        kubeconfig: "{{ kube_config if kube_config != '' else omit }}"
      register: preloaded_engines_cm
      failed_when: false

    - name: Parse already preloaded engines
      set_fact:
        already_preloaded: "{{ (preloaded_engines_cm.resources[0].data.engines | default('{}') | from_json).keys() | list if preloaded_engines_cm.resources | length > 0 else [] }}"

    - name: Filter engines that need preloading
      set_fact:
        engines_to_preload: "{{ target_engines | rejectattr('name', 'in', already_preloaded) | list }}"

    - name: Display preloading status
      debug:
        msg: |
          Already preloaded engines: {{ already_preloaded }}
          Engines that need preloading: {{ engines_to_preload | map(attribute='name') | list }}

    - name: Skip if no engines need preloading
      meta: end_play
      when: engines_to_preload | length == 0

    - name: Create DaemonSet to preload container images on all nodes
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: engine-preloader
            namespace: "{{ target_namespace }}"
            labels:
              app: budeval
              purpose: engine-preloader
          spec:
            selector:
              matchLabels:
                app: budeval
                purpose: engine-preloader
            template:
              metadata:
                labels:
                  app: budeval
                  purpose: engine-preloader
              spec:
                tolerations:
                  # Allow scheduling on master nodes if needed
                  - key: node-role.kubernetes.io/master
                    operator: Exists
                    effect: NoSchedule
                  - key: node-role.kubernetes.io/control-plane
                    operator: Exists
                    effect: NoSchedule
                containers:
                - name: image-preloader
                  image: busybox:1.35
                  command:
                    - /bin/sh
                    - -c
                    - |
                      set -e
                      echo "Starting container image preloading on node: $(hostname)"
                      echo "Container runtime: $(ls -la /run/containerd/containerd.sock 2>/dev/null && echo 'containerd' || echo 'docker')"

                      # Create preload jobs for each engine image
                      echo "Creating preload jobs for engine images..."

                      # This container just coordinates - actual image pulls happen via Jobs
                      echo "Preload coordinator started successfully on node: $(hostname)"

                      # Keep running to maintain DaemonSet
                      while true; do
                        echo "$(date): Preload coordinator running on $(hostname)"
                        sleep 30
                      done
                  resources:
                    requests:
                      memory: "64Mi"
                      cpu: "50m"
                    limits:
                      memory: "128Mi"
                      cpu: "100m"
                restartPolicy: Always
        kubeconfig: "{{ kube_config if kube_config != '' else omit }}"

    - name: Create Jobs to preload each engine image
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: "preload-{{ item.name | lower | regex_replace('[^a-z0-9-]', '-') }}"
            namespace: "{{ target_namespace }}"
            labels:
              app: budeval
              purpose: image-preloader
              engine: "{{ item.name | lower }}"
          spec:
            parallelism: 3  # Run on multiple nodes simultaneously
            completions: 3  # Ensure it runs on at least 3 nodes (or all if fewer)
            backoffLimit: 2
            ttlSecondsAfterFinished: 300  # Clean up after 5 minutes
            template:
              metadata:
                labels:
                  app: budeval
                  purpose: image-preloader
                  engine: "{{ item.name | lower }}"
              spec:
                restartPolicy: Never
                tolerations:
                  - key: node-role.kubernetes.io/master
                    operator: Exists
                    effect: NoSchedule
                  - key: node-role.kubernetes.io/control-plane
                    operator: Exists
                    effect: NoSchedule
                containers:
                - name: image-puller
                  image: "{{ item.image }}"
                  command:
                    - /bin/sh
                    - -c
                    - |
                      echo "âœ… Successfully pulled and cached {{ item.image }} on node: $(hostname)"
                      echo "Engine: {{ item.name }} ({{ item.version }})"
                      echo "Image size: $(du -sh / 2>/dev/null | head -1 | cut -f1 || echo 'unknown')"
                      echo "Cached at: $(date)"

                      # Keep container running briefly to ensure image is cached
                      sleep 10
                      echo "Image caching completed for {{ item.name }}"
                  resources:
                    requests:
                      memory: "128Mi"
                      cpu: "100m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
                  # Use image pull policy to ensure fresh pulls
                  imagePullPolicy: Always
        kubeconfig: "{{ kube_config if kube_config != '' else omit }}"
      loop: "{{ engines_to_preload }}"

    - name: Wait for preload jobs to complete
      kubernetes.core.k8s_info:
        api_version: batch/v1
        kind: Job
        namespace: "{{ target_namespace }}"
        label_selectors:
          - app=budeval
          - purpose=image-preloader
        kubeconfig: "{{ kube_config if kube_config != '' else omit }}"
        wait: true
        wait_condition:
          type: Complete
          status: "True"
        wait_timeout: 600
      register: preload_jobs

    - name: Check preload job status
      debug:
        msg: |
          Preload jobs status:
          {% for job in preload_jobs.resources %}
          - {{ job.metadata.name }}: {{ job.status.conditions[-1].type if job.status.conditions else 'Unknown' }}
          {% endfor %}

    - name: Get preload job logs
      kubernetes.core.k8s_log:
        api_version: v1
        kind: Pod
        namespace: "{{ target_namespace }}"
        label_selectors:
          - app=budeval
          - purpose=image-preloader
        kubeconfig: "{{ kube_config if kube_config != '' else omit }}"
      register: preload_logs
      failed_when: false

    - name: Display preload logs summary
      debug:
        msg: |
          Image preloading completed. Sample logs:
          {{ preload_logs.log_lines[-10:] | join('\n') if preload_logs.log_lines else 'No logs available' }}
      when: preload_logs.log_lines is defined

    - name: Clean up preload jobs
      kubernetes.core.k8s:
        state: absent
        api_version: batch/v1
        kind: Job
        name: "preload-{{ item.name | lower | regex_replace('[^a-z0-9-]', '-') }}"
        namespace: "{{ target_namespace }}"
        kubeconfig: "{{ kube_config if kube_config != '' else omit }}"
      loop: "{{ engines_to_preload }}"
      ignore_errors: yes

    - name: Clean up DaemonSet
      kubernetes.core.k8s:
        state: absent
        api_version: apps/v1
        kind: DaemonSet
        name: engine-preloader
        namespace: "{{ target_namespace }}"
        kubeconfig: "{{ kube_config if kube_config != '' else omit }}"

    - name: Update preloaded engines ConfigMap
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: preloaded-engines
            namespace: "{{ target_namespace }}"
            labels:
              app: budeval
              purpose: engine-tracking
          data:
            engines: |
              {
                {% for engine in (already_preloaded + engines_to_preload) %}
                {% if loop.index0 > 0 %},{% endif %}
                "{{ engine.name if engine.name is defined else engine }}": {
                  "image": "{{ engine.image if engine.image is defined else 'unknown' }}",
                  "version": "{{ engine.version if engine.version is defined else 'unknown' }}",
                  "preloaded_at": "{{ ansible_date_time.iso8601 }}",
                  "method": "kubernetes-jobs"
                }
                {% endfor %}
              }
            last_updated: "{{ ansible_date_time.iso8601 }}"
            preload_method: "kubernetes-jobs"
        kubeconfig: "{{ kube_config if kube_config != '' else omit }}"

    - name: Display completion status
      debug:
        msg: |
          âœ… Engine preloading completed successfully!
          Total engines preloaded: {{ engines_to_preload | length }}
          Engines: {{ engines_to_preload | map(attribute='name') | list }}
          Method: Kubernetes Jobs (compatible with containerd/K3s)
          ConfigMap updated: preloaded-engines
