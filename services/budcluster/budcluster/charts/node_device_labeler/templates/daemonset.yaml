apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "node-device-labeler.fullname" . }}
  labels:
    {{- include "node-device-labeler.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "node-device-labeler.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "node-device-labeler.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "node-device-labeler.serviceAccountName" . }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets.name }}
      containers:
        - name: labeler
          image: "{{ .Values.image.repository }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          command:
            - /bin/ash
            - -c
            - |
              check_gpu() {
                # Check for NVIDIA GPU using lspci
                if lspci | grep -i nvidia > /dev/null; then
                  echo "Found NVIDIA GPU devices"
                  return 0
                fi
                # Check for AMD GPU using lspci
                if lspci | grep -i amd > /dev/null; then
                  echo "Found AMD GPU devices"
                  return 0
                fi
                return 1
              }

              check_hpu() {
                # Check for Habana HPU using lspci
                if lspci | grep -i habana > /dev/null; then
                  echo "Found HPU devices"
                  return 0
                fi
                return 1
              }

              check_cpu_amx() {
                # Check for AMX flag in CPU
                if grep -q amx /proc/cpuinfo; then
                  echo "Found CPU with AMX support"
                  return 0
                fi
                return 1
              }
              
              # Remove existing device type labels first
              kubectl label node ${NODE_NAME} device.kubernetes.io/type- --overwrite 2>/dev/null || true
              
              DEVICE_FOUND=false

              # Check for GPU
              {{- if .Values.deviceChecks.gpu.enabled }}
              if check_gpu; then
                echo "Labeling node ${NODE_NAME} as GPU node"
                kubectl label node ${NODE_NAME} {{ .Values.deviceChecks.gpu.label }} --overwrite
                DEVICE_FOUND=true
              fi
              {{- end }}
              
              # Check for HPU
              {{- if .Values.deviceChecks.hpu.enabled }}
              if ! $DEVICE_FOUND && check_hpu; then
                echo "Labeling node ${NODE_NAME} as HPU node"
                kubectl label node ${NODE_NAME} {{ .Values.deviceChecks.hpu.label }} --overwrite
                DEVICE_FOUND=true
              fi
              {{- end }}

              # Check for CPU with AMX
              {{- if .Values.deviceChecks.cpu_amx.enabled }}
              if ! $DEVICE_FOUND && check_cpu_amx; then
                echo "Labeling node ${NODE_NAME} as CPU_AMX node"
                kubectl label node ${NODE_NAME} {{ .Values.deviceChecks.cpu_amx.label }} --overwrite
                DEVICE_FOUND=true
              fi
              {{- end }}
              
              # Default to CPU if no other devices found
              {{- if .Values.deviceChecks.cpu.enabled }}
              if ! $DEVICE_FOUND; then
                echo "No specialized hardware found, labeling node ${NODE_NAME} as CPU node"
                kubectl label node ${NODE_NAME} {{ .Values.deviceChecks.cpu.label }} --overwrite
              fi
              {{- end }}

              # Keep the container running to prevent crashloop
              while true; do
                sleep 3600
              done
              
          securityContext:
            privileged: true
          volumeMounts:
            - name: dev-dir
              mountPath: /dev
            - name: proc-dir
              mountPath: /proc
            - name: sys-dir
              mountPath: /sys
      volumes:
        - name: dev-dir
          hostPath:
            path: /dev
        - name: proc-dir
          hostPath:
            path: /proc
        - name: sys-dir
          hostPath:
            path: /sys