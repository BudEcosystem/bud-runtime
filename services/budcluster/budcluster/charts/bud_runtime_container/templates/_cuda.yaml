{{- define "bud-runtime-container.cuda-container" }}
- name: cuda-container
  image: {{ .device.image }}
  imagePullPolicy: {{ $.Values.pullPolicy }}
  ports:
    - containerPort: {{ $.Values.containerPort }}
  volumeMounts:
    - name: model-registry
      mountPath: /data/models-registry
      readOnly: false
    - name: shm
      mountPath: "/dev/shm"
  resources:
    requests:
      nvidia.com/gpu: {{ .device.tp_size }}
    limits:
      nvidia.com/gpu: {{ .device.tp_size }}
  {{- if .device.envs }}
  env:
  {{- range $key, $value := .device.envs }}
  - name: {{ $key }}
    value: {{ $value | quote }}
  {{- end }}
  {{- end }}
  {{- if gt (.device.pp_size | int) 1 }}
  command: ["/bin/bash", "-c"]
  args:
    - >
      ulimit -n 65536 &&
      apt update && apt install -y wget net-tools && pip3 install ray[default] pyarrow pandas &&
      echo "[INFO] Starting Ray head node..." &&
      eval "$KUBERAY_GEN_RAY_START_CMD" &

      echo "[INFO] Waiting for Ray dashboard to be ready..." &&
      until curl --max-time 5 --fail http://127.0.0.1:8265 > /dev/null 2>&1; do
        echo "[WAITING] $(date -u +'%Y-%m-%dT%H:%M:%SZ') - Ray dashboard not ready yet...";
        sleep 2;
      done &&
      echo "[SUCCESS] Ray dashboard is available!" &&

      vllm serve \
        --distributed-executor-backend ray \
        --uvicorn-log-level warning \
        {{- range $key, $value := .device.args }}
        {{ $value }} \
        {{- end }}
  {{- else }}
  command:
  - python3
  - -m
  - vllm.entrypoints.openai.api_server
  {{- if .device.args }}
  args:
  {{- range $key, $value := .device.args }}
  - {{ $value }}
  {{- end }}
  - --uvicorn-log-level
  - warning
  {{- end }}
  {{- end }}
  livenessProbe:
    httpGet:
      path: /health
      port: {{ $.Values.containerPort }}
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 20
  readinessProbe:
    httpGet:
      path: /health
      port: {{ $.Values.containerPort }}
    initialDelaySeconds: 60
    periodSeconds: 5
  startupProbe:
    httpGet:
      path: /health
      port: {{ $.Values.containerPort }}
      scheme: HTTP
    failureThreshold: 200
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1
{{- end }}
