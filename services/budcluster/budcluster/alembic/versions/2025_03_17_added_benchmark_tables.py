"""added benchmark tables.

Revision ID: a55cf07f6ef7
Revises: bc1ee1faa04d
Create Date: 2025-03-17 09:14:21.901148

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = "a55cf07f6ef7"
down_revision: Union[str, None] = "bc1ee1faa04d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade the database."""
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("success", "failed", "processing", name="benchmark_status_enum").create(op.get_bind())
    op.create_table(
        "benchmark",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("benchmark_id", sa.Uuid(), nullable=False),
        sa.Column("cluster_id", sa.Uuid(), nullable=True),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("model_id", sa.Uuid(), nullable=False),
        sa.Column("model", sa.String(), nullable=False),
        sa.Column("nodes", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("num_of_users", sa.Integer(), nullable=False),
        sa.Column("max_input_tokens", sa.Integer(), nullable=True),
        sa.Column("max_output_tokens", sa.Integer(), nullable=True),
        # sa.Column("use_cache", sa.Boolean(), nullable=False),
        # sa.Column("embedding_model", sa.String(), nullable=True),
        # sa.Column("eviction_policy", sa.String(), nullable=True),
        # sa.Column("max_size", sa.Integer(), nullable=True),
        # sa.Column("ttl", sa.Integer(), nullable=True),
        # sa.Column("score_threshold", sa.Float(), nullable=True),
        sa.Column("datasets", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM("success", "failed", "processing", name="benchmark_status_enum", create_type=False),
            nullable=False,
        ),
        sa.Column("reason", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("modified_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["cluster_id"],
            ["cluster.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "benchmark_result",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("benchmark_id", sa.Uuid(), nullable=False),
        sa.Column("duration", sa.Float(), nullable=False),
        sa.Column("successful_requests", sa.Integer(), nullable=False),
        sa.Column("total_input_tokens", sa.Integer(), nullable=False),
        sa.Column("total_output_tokens", sa.Integer(), nullable=False),
        sa.Column("request_throughput", sa.Float(), nullable=True),
        sa.Column("input_throughput", sa.Float(), nullable=True),
        sa.Column("output_throughput", sa.Float(), nullable=True),
        sa.Column("p25_throughput", sa.Float(), nullable=True),
        sa.Column("p75_throughput", sa.Float(), nullable=True),
        sa.Column("p95_throughput", sa.Float(), nullable=True),
        sa.Column("p99_throughput", sa.Float(), nullable=True),
        sa.Column("min_throughput", sa.Float(), nullable=True),
        sa.Column("max_throughput", sa.Float(), nullable=True),
        sa.Column("mean_ttft_ms", sa.Float(), nullable=True),
        sa.Column("median_ttft_ms", sa.Float(), nullable=True),
        sa.Column("p25_ttft_ms", sa.Float(), nullable=True),
        sa.Column("p75_ttft_ms", sa.Float(), nullable=True),
        sa.Column("p95_ttft_ms", sa.Float(), nullable=True),
        sa.Column("p99_ttft_ms", sa.Float(), nullable=True),
        sa.Column("min_ttft_ms", sa.Float(), nullable=True),
        sa.Column("max_ttft_ms", sa.Float(), nullable=True),
        sa.Column("mean_tpot_ms", sa.Float(), nullable=True),
        sa.Column("median_tpot_ms", sa.Float(), nullable=True),
        sa.Column("p25_tpot_ms", sa.Float(), nullable=True),
        sa.Column("p75_tpot_ms", sa.Float(), nullable=True),
        sa.Column("p95_tpot_ms", sa.Float(), nullable=True),
        sa.Column("p99_tpot_ms", sa.Float(), nullable=True),
        sa.Column("min_tpot_ms", sa.Float(), nullable=True),
        sa.Column("max_tpot_ms", sa.Float(), nullable=True),
        sa.Column("mean_itl_ms", sa.Float(), nullable=True),
        sa.Column("median_itl_ms", sa.Float(), nullable=True),
        sa.Column("p25_itl_ms", sa.Float(), nullable=True),
        sa.Column("p75_itl_ms", sa.Float(), nullable=True),
        sa.Column("p95_itl_ms", sa.Float(), nullable=True),
        sa.Column("p99_itl_ms", sa.Float(), nullable=True),
        sa.Column("min_itl_ms", sa.Float(), nullable=True),
        sa.Column("max_itl_ms", sa.Float(), nullable=True),
        sa.Column("mean_e2el_ms", sa.Float(), nullable=True),
        sa.Column("median_e2el_ms", sa.Float(), nullable=True),
        sa.Column("p25_e2el_ms", sa.Float(), nullable=True),
        sa.Column("p75_e2el_ms", sa.Float(), nullable=True),
        sa.Column("p95_e2el_ms", sa.Float(), nullable=True),
        sa.Column("p99_e2el_ms", sa.Float(), nullable=True),
        sa.Column("min_e2el_ms", sa.Float(), nullable=True),
        sa.Column("max_e2el_ms", sa.Float(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("modified_at", sa.DateTime(timezone=True), nullable=False),
        # sa.Column("cache_hit", sa.Integer(), nullable=False),
        # sa.Column("mean_cache_latency", sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(["benchmark_id"], ["benchmark.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade the database."""
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_table("benchmark_result")
    op.drop_table("benchmark")
    sa.Enum("success", "failed", "processing", name="benchmark_status_enum").drop(op.get_bind())
    # ### end Alembic commands ###
