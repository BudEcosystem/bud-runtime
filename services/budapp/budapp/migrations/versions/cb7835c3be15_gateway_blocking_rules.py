"""gateway blocking rules

Revision ID: cb7835c3be15
Revises: c82d259d07ce
Create Date: 2025-08-13 10:23:46.536003

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = "cb7835c3be15"
down_revision: Union[str, None] = "47f73a835ad9"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("active", "inactive", "expired", name="blocking_rule_status_enum").create(op.get_bind())
    sa.Enum(
        "ip_blocking", "country_blocking", "user_agent_blocking", "rate_based_blocking", name="blocking_rule_type_enum"
    ).create(op.get_bind())
    op.create_table(
        "gateway_blocking_rule",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.String(length=1000), nullable=True),
        sa.Column(
            "rule_type",
            postgresql.ENUM(
                "ip_blocking",
                "country_blocking",
                "user_agent_blocking",
                "rate_based_blocking",
                name="blocking_rule_type_enum",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("rule_config", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM("active", "inactive", "expired", name="blocking_rule_status_enum", create_type=False),
            nullable=False,
        ),
        sa.Column("reason", sa.String(length=500), nullable=True),
        sa.Column("priority", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.Uuid(), nullable=True),
        sa.Column("model_name", sa.String(length=255), nullable=True),
        sa.Column("endpoint_id", sa.Uuid(), nullable=True),
        sa.Column("created_by", sa.Uuid(), nullable=False),
        sa.Column("match_count", sa.Integer(), nullable=False),
        sa.Column("last_matched_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("modified_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["endpoint_id"],
            ["endpoint.id"],
        ),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_blocking_rule_endpoint", "gateway_blocking_rule", ["endpoint_id"], unique=False)
    op.create_index("idx_blocking_rule_model_name", "gateway_blocking_rule", ["model_name"], unique=False)
    op.create_index(
        "idx_blocking_rule_project_status", "gateway_blocking_rule", ["project_id", "status"], unique=False
    )
    op.create_index("idx_blocking_rule_type_status", "gateway_blocking_rule", ["rule_type", "status"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_blocking_rule_type_status", table_name="gateway_blocking_rule")
    op.drop_index("idx_blocking_rule_project_status", table_name="gateway_blocking_rule")
    op.drop_index("idx_blocking_rule_model_name", table_name="gateway_blocking_rule")
    op.drop_index("idx_blocking_rule_endpoint", table_name="gateway_blocking_rule")
    op.drop_table("gateway_blocking_rule")
    sa.Enum(
        "ip_blocking", "country_blocking", "user_agent_blocking", "rate_based_blocking", name="blocking_rule_type_enum"
    ).drop(op.get_bind())
    sa.Enum("active", "inactive", "expired", name="blocking_rule_status_enum").drop(op.get_bind())
    # ### end Alembic commands ###
