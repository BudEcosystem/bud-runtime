{
    "apac_eval": {
        "schema": {
        "name": "alpaca_results",
        "baseSelector": ".url-extraction",
        "fields": [
            {
                "name":"url",
                "selector": ".url-container",
                "type":"text"
               }
        ]
    },
        "url": "https://tatsu-lab.github.io/alpaca_eval/",
        "name": "APAC Eval Leaderboard",
        "js_code": ["(\nfunction extract_url() {\n    try {\n        const url = currentUrl;\n        console.log('Extracted URL:', url);\n        let baseContainer = document.querySelector('.url-extraction');\n        if (!baseContainer) {\n            baseContainer = document.createElement('div');\n            baseContainer.classList.add('url-extraction');\n            document.body.appendChild(baseContainer);\n        }\n        let urlContainer = baseContainer.querySelector('.url-container');\n        if (!urlContainer) {\n            urlContainer = document.createElement('div');\n            urlContainer.classList.add('url-container');\n            urlContainer.textContent = url;\n            baseContainer.appendChild(urlContainer);\n        } else {\n            urlContainer.textContent = url;\n        }\n    } catch (error) {\n        console.error('Error extracting URL:', error);\n    }\n})();"],
        "wait_for": null,
        "baseSelector":null
    },
    "berkeley": {
        "schema": {
            "name": "leaderboard",
            "baseSelector": "#leaderboard-table tbody tr",
            "fields": [
                {
                    "name": "rank",
                    "selector": "td:nth-child(1)",
                    "type": "text"
                },
                {
                    "name": "overall_accuracy",
                    "selector": "td:nth-child(2)",
                    "type": "text"
                },
                {
                    "name": "name",
                    "selector": "td:nth-child(3)",
                    "type": "text"
                },
                {
                    "name": "url",
                    "selector": "td:nth-child(3) a",
                    "type": "attribute",
                    "attribute": "href"
                },
                {
                    "name": "latency_cost",
                    "selector": "td:nth-child(4)",
                    "type": "text"
                },
                {
                    "name": "latency_mean",
                    "selector": "td:nth-child(5)",
                    "type": "text"
                },
                {
                    "name": "latency_sd",
                    "selector": "td:nth-child(6)",
                    "type": "text"
                },
                {
                    "name": "latency_p95",
                    "selector": "td:nth-child(7)",
                    "type": "text"
                },
                {
                    "name": "single_turn_non_live_ast_summary",
                    "selector": "td:nth-child(8)",
                    "type": "text"
                },
                {
                    "name": "single_turn_non_live_ast_simple",
                    "selector": "td:nth-child(9)",
                    "type": "text"
                },
                {
                    "name": "single_turn_non_live_ast_multiple",
                    "selector": "td:nth-child(10)",
                    "type": "text"
                },
                {
                    "name": "single_turn_non_live_ast_parallel",
                    "selector": "td:nth-child(11)",
                    "type": "text"
                },
                {
                    "name": "single_turn_non_live_ast_multiple_parallel",
                    "selector": "td:nth-child(12)",
                    "type": "text"
                },
                {
                    "name": "single_turn_non_live_exe_summary",
                    "selector": "td:nth-child(13)",
                    "type": "text"
                },
                {
                    "name": "single_turn_non_live_exe_simple",
                    "selector": "td:nth-child(14)",
                    "type": "text"
                },
                {
                    "name": "single_turn_non_live_exe_multiple",
                    "selector": "td:nth-child(15)",
                    "type": "text"
                },
                {
                    "name": "single_turn_non_live_exe_parallel",
                    "selector": "td:nth-child(16)",
                    "type": "text"
                },
                {
                    "name": "single_turn_non_live_exe_multiple_parallel",
                    "selector": "td:nth-child(17)",
                    "type": "text"
                },
                {
                    "name": "single_turn_live_ast_summary",
                    "selector": "td:nth-child(18)",
                    "type": "text"
                },
                {
                    "name": "single_turn_live_ast_simple",
                    "selector": "td:nth-child(19)",
                    "type": "text"
                },
                {
                    "name": "single_turn_live_ast_multiple",
                    "selector": "td:nth-child(20)",
                    "type": "text"
                },
                {
                    "name": "single_turn_live_ast_parallel",
                    "selector": "td:nth-child(21)",
                    "type": "text"
                },
                {
                    "name": "single_turn_live_ast_multiple_parallel",
                    "selector": "td:nth-child(22)",
                    "type": "text"
                },
                {
                    "name": "multi_turn_overall_accuracy",
                    "selector": "td:nth-child(23)",
                    "type": "text"
                },
                {
                    "name": "multi_turn_base",
                    "selector": "td:nth-child(24)",
                    "type": "text"
                },
                {
                    "name": "multi_miss_func",
                    "selector": "td:nth-child(25)",
                    "type": "text"
                },
                {
                    "name": "multi_miss_param",
                    "selector": "td:nth-child(26)",
                    "type": "text"
                },
                {
                    "name": "multi_long_context",
                    "selector": "td:nth-child(27)",
                    "type": "text"
                },
                {
                    "name": "hallucination_measurement_relevance",
                    "selector": "td:nth-child(28)",
                    "type": "text"
                },
                {
                    "name": "hallucination_measurement_irrelevance",
                    "selector": "td:nth-child(29)",
                    "type": "text"
                },
                {
                    "name": "organization",
                    "selector": "td:nth-child(30)",
                    "type": "text"
                },
                {
                    "name": "license",
                    "selector": "td:nth-child(31)",
                    "type": "text"
                }
            ]
        },
        "url": "https://gorilla.cs.berkeley.edu/leaderboard.html",
        "baseSelector": "#leaderboard-table tbody tr",
        "name": "Berkeley Leaderboard",
        "js_code": null,
        "wait_for": null
    },
    "live_codebench": {
        "schema": {
            "name": "leaderboard",
            "baseSelector": "div[role='row']",
            "fields": [
                {
                    "name": "rank",
                    "selector": "div[col-id='Rank'][role='gridcell']",
                    "type": "text"
                },
                {
                    "name": "name",
                    "selector": "div[col-id='Model'][role='gridcell']",
                    "type": "text"
                },
                {
                    "name": "url",
                    "selector": "div[col-id='Model'][role='gridcell'] a",
                    "type": "attribute",
                    "attribute": "href"
                },
                {
                    "name": "pass_1",
                    "selector": "div[col-id='Pass@1'][role='gridcell']",
                    "type": "text"
                },
                {
                    "name": "easy_pass_1",
                    "selector": "div[col-id='Easy-Pass@1'][role='gridcell']",
                    "type": "text"
                },
                {
                    "name": "medium_pass_1",
                    "selector": "div[col-id='Medium-Pass@1'][role='gridcell']",
                    "type": "text"
                },
                {
                    "name": "hard_pass_1",
                    "selector": "div[col-id='Hard-Pass@1'][role='gridcell']",
                    "type": "text"
                }
            ]
        },
        "url": "https://livecodebench.github.io/leaderboard.html",
        "baseSelector": "div[role='row']",
        "name": "Live codebench Leaderboard",
        "js_code": null,
        "wait_for": null
    },
    "mteb": {
        "schema": {
            "name": "leaderboard",
            "baseSelector": ".model-row",
            "fields": [
                {
                    "name": "rank",
                    "selector": "  .model-rank",
                    "type": "text"
                },
                {
                    "name": "name",
                    "selector": "  .model-name",
                    "type": "text"
                },
                {
                    "name": "url",
                    "selector": "  .model-url a",
                    "type": "attribute",
                    "attribute": "href"
                },
                {
                    "name": "model_size_million_parameters",
                    "selector": "  .model-size",
                    "type": "text"
                },
                {
                    "name": "memory_usage_gb_fp32",
                    "selector": "  .memory-usage",
                    "type": "text"
                },
                {
                    "name": "embedding_dimensions",
                    "selector": "  .embedding-dimensions",
                    "type": "text"
                },
                {
                    "name": "max_tokens",
                    "selector": "  .max-tokens",
                    "type": "text"
                },
                {
                    "name": "average_56_datasets",
                    "selector": "  .average-56-datasets",
                    "type": "text"
                },
                {
                    "name": "classification_average_12_datasets",
                    "selector": "  .classification-average-12-datasets",
                    "type": "text"
                },
                {
                    "name": "clustering_average_11_datasets",
                    "selector": "  .clustering-average-11-datasets",
                    "type": "text"
                },
                {
                    "name": "pair_classification_average_3_datasets",
                    "selector": "  .pair-classification-average-3-datasets",
                    "type": "text"
                },
                {
                    "name": "reranking_average_4_datasets",
                    "selector": "  .reranking-average-4-datasets",
                    "type": "text"
                },
                {
                    "name": "retrieval_average_15_datasets",
                    "selector": "  .retrieval-average-15-datasets",
                    "type": "text"
                },
                {
                    "name": "sts_average_10_datasets",
                    "selector": "  .sts-average-10-datasets",
                    "type": "text"
                },
                {
                    "name": "summarization_average_1_datasets",
                    "selector": "  .summarization-average-1-datasets",
                    "type": "text"
                }
            ]
        },
        "wait_for": "\n    () => {\n    const table = document.querySelector('svelte-virtual-table-viewport table');\n    if (table && table.querySelectorAll('tr[slot=\"tbody\"]').length > 10) {\n        console.log(\"Table loaded with sufficient rows.\");\n        return true;\n    } else {\n        console.log(\"Waiting for table rows to load...\");\n        return false;\n    }\n};\n    ",
        "js_code": [
            "\n            (function checkTableBody() {\n                const tableBody = document.querySelector('svelte-virtual-table-viewport table');\n                console.log(\"Checking for table body...\", tableBody);\n    \n                if (tableBody) {\n                    console.log(\"tableBody found\", tableBody);\n                    const collectedData = [];\n    \n                    // Create or select the results container\n                    let resultsContainer = document.querySelector('.results-container');\n                    if (!resultsContainer) {\n                        resultsContainer = document.createElement('div');\n                        resultsContainer.classList.add('results-container');\n                        document.body.appendChild(resultsContainer);\n                    }\n    \n                    function extractData() {\n                        const rows = tableBody.querySelectorAll('tr[slot=\"tbody\"]');\n                        rows.forEach(row => {\n                            const cells = row.querySelectorAll('td');\n                            const modelName = cells[1]?.innerText.trim() || '';\n    \n                            if (!collectedData.some(data => data.model_name === modelName)) {\n                                const rowData = {\n                                    rank: cells[0]?.innerText.trim() || '',\n                                    model_name: modelName,\n                                    model_url: cells[1]?.querySelector('a')?.href || '',\n                                    model_size_million_parameters: cells[2]?.innerText.trim() || '',\n                                    memory_usage_gb_fp32: cells[3]?.innerText.trim() || '',\n                                    embedding_dimensions: cells[4]?.innerText.trim() || '',\n                                    max_tokens: cells[5]?.innerText.trim() || '',\n                                    average_56_datasets: cells[6]?.innerText.trim() || '',\n                                    classification_average_12_datasets: cells[7]?.innerText.trim() || '',\n                                    clustering_average_11_datasets: cells[8]?.innerText.trim() || '',\n                                    pair_classification_average_3_datasets: cells[9]?.innerText.trim() || '',\n                                    reranking_average_4_datasets: cells[10]?.innerText.trim() || '',\n                                    retrieval_average_15_datasets: cells[11]?.innerText.trim() || '',\n                                    sts_average_10_datasets: cells[12]?.innerText.trim() || '',\n                                    summarization_average_1_datasets: cells[13]?.innerText.trim() || ''\n                                };\n                                collectedData.push(rowData);\n                            }\n                        });\n                    }\n    \n                    let scrollAttempts = 0;\n    \n                    function scrollTableBody() {\n                        tableBody.scrollTop += 300;\n    \n                        setTimeout(() => {\n                            const newScrollHeight = tableBody.scrollHeight;\n    \n                            if (tableBody.scrollTop + tableBody.clientHeight >= newScrollHeight || scrollAttempts > 1000) {\n                                console.log(\"Reached the end or max attempts, stopping scroll.\");\n                                extractData(); // Final extraction in case of remaining items\n                                updateResultsContainer(); // Append extracted data to results container\n                            } else {\n                                console.log(\"Continuing to scroll...\");\n                                extractData();\n                                scrollAttempts++;\n                                scrollTableBody(); // Recursive call to keep scrolling\n                            }\n                        }, 500);\n                    }\n    \n                    function updateResultsContainer() {\n                        resultsContainer.innerHTML = ''; // Clear existing content\n    \n                        collectedData.forEach(rowData => {\n                            const row = document.createElement('div');\n                            row.classList.add('model-row');\n                            row.innerHTML = `\n                                <div class=\"model-rank\">${rowData.rank}</div>\n                                <div class=\"model-name\"><a href=\"${rowData.model_url}\" target=\"_blank\">${rowData.model_name}</a></div>\n                                <div class=\"model-size\">${rowData.model_size_million_parameters}</div>\n                                <div class=\"memory-usage\">${rowData.memory_usage_gb_fp32}</div>\n                                <div class=\"embedding-dimensions\">${rowData.embedding_dimensions}</div>\n                                <div class=\"max-tokens\">${rowData.max_tokens}</div>\n                                <div class=\"average-56-datasets\">${rowData.average_56_datasets}</div>\n                                <div class=\"classification-average-12-datasets\">${rowData.classification_average_12_datasets}</div>\n                                <div class=\"clustering-average-11-datasets\">${rowData.clustering_average_11_datasets}</div>\n                                <div class=\"pair-classification-average-3-datasets\">${rowData.pair_classification_average_3_datasets}</div>\n                                <div class=\"reranking-average-4-datasets\">${rowData.reranking_average_4_datasets}</div>\n                                <div class=\"retrieval-average-15-datasets\">${rowData.retrieval_average_15_datasets}</div>\n                                <div class=\"sts-average-10-datasets\">${rowData.sts_average_10_datasets}</div>\n                                <div class=\"summarization-average-1-datasets\">${rowData.summarization_average_1_datasets}</div>\n                            `;\n                            resultsContainer.appendChild(row);\n                        });\n                        console.log(\"Data appended to results container.\");\n                    }\n    \n                    extractData();\n                    scrollTableBody();\n    \n                } else {\n                    console.log(\"Table body not found, retrying in 500 ms...\");\n                    setTimeout(checkTableBody, 500); // Retry after 500 ms if tableBody is not found\n                }\n            })();\n            "
        ],
        "url": "https://mteb-leaderboard.hf.space/?__theme=light",
        "baseSelector": "svelte-virtual-table-viewport table",
        "name": "Mteb Leaderboard"
    },
    "ugi": {
        "schema": {
            "name": "leaderboard",
            "baseSelector": ".model-row",
            "fields": [
                {
                    "name": "rank",
                    "selector": ".rank",
                    "type": "text"
                },
                {
                    "name": "#P",
                    "selector": ".P",
                    "type": "text"
                },
                {
                    "name": "name",
                    "selector": ".model-name",
                    "type": "text"
                },
                {
                    "name": "url",
                    "selector": ".model-name a",
                    "type": "attribute",
                    "attribute": "href"
                },
                {
                    "name": "UGI_score",
                    "selector": ".ugi-score",
                    "type": "text"
                },
                {
                    "name": "W_10_score",
                    "selector": ".w10-score",
                    "type": "text"
                },
                {
                    "name": "Unruly",
                    "selector": ".unruly",
                    "type": "text"
                },
                {
                    "name": "Internet",
                    "selector": ".internet",
                    "type": "text"
                },
                {
                    "name": "PolContro",
                    "selector": ".polcontro-score",
                    "type": "text"
                }
            ]
        },
        "wait_for":"(() => {\n    const checkboxes = document.querySelectorAll(\"#additional-columns-filter input[type='checkbox']\");\n    if (checkboxes.length === 0) {\n        console.log(\"No checkboxes found.\");\n        return false;\n    }\n    checkboxes.forEach(checkbox => {\n        if (!checkbox.checked) {\n            checkbox.click();\n        }\n    });\n    const table = document.querySelector(\"#leaderboard-grid\");\n    if (!table) {\n        console.log(\"Table not found.\");\n        return false;\n    }\n    const columnHeaders = table.querySelectorAll(\".ag-header-cell\");\n    console.log(\"Number of columns:\", columnHeaders.length);\n    columnHeaders.forEach((col, idx) => {\n        console.log(`Column ${idx + 1}:`, col.textContent.trim());\n    });\n    const rows = table.querySelectorAll(\".ag-row\");\n    console.log(\"Number of rows:\", rows.length);\n    if (rows.length > 10) {\n        console.log(\"Table loaded with sufficient rows.\");\n        return true;\n    } else {\n        console.log(\"Waiting for table rows to load...\");\n        return false;\n    }\n})();",
        "js_code": [
                "(\n(function checkAgGrid() {\n    const gridDiv = document.querySelector('#leaderboard-grid');\n    console.log('Checking for AG Grid...', gridDiv);\n    if (!gridDiv || !gridDiv.querySelector('.ag-root-wrapper')) {\n        console.log('AG Grid not found or not initialized, retrying in 300ms...');\n        setTimeout(checkAgGrid, 300);\n        return;\n    }\n    console.log('AG Grid found', gridDiv);\n    const collectedData = new Set();\n    const extractedRows = [];\n    let resultsContainer = document.querySelector('.results-container');\n    let rank = 1;\n    if (!resultsContainer) {\n        resultsContainer = document.createElement('div');\n        resultsContainer.classList.add('results-container');\n        document.body.appendChild(resultsContainer);\n    }\n    async function ensureColumnVisible(colId) {\n        const gridCenter = document.querySelector('.ag-center-cols-viewport');\n        const header = document.querySelector(`[col-id=\"${colId}\"] .ag-header-cell`);\n        if (!header || !gridCenter) return false;\n        const headerRect = header.getBoundingClientRect();\n        const gridRect = gridCenter.getBoundingClientRect();\n        if (headerRect.left < gridRect.left || headerRect.right > gridRect.right) {\n            gridCenter.scrollLeft = header.offsetLeft - 100;\n            await new Promise(resolve => requestAnimationFrame(resolve));\n        }\n        return true;\n    }\n    async function getCellValue(row, colId) {\n        await ensureColumnVisible(colId);\n        let cell = row.querySelector(`[col-id=\"${colId}\"]`);\n        return cell ? cell.innerText.trim() : '';\n    }\n    async function extractRowData(rowIndex) {\n        const rowData = {};\n        const pinnedRow = document.querySelector(`.ag-pinned-left-cols-container .ag-row[row-index=\"${rowIndex}\"]`);\n        const centerRow = document.querySelector(`.ag-center-cols-viewport .ag-row[row-index=\"${rowIndex}\"]`);\n        if (!pinnedRow || !centerRow) return null;\n        rowData.rank = rank++;\n        rowData['#P'] = pinnedRow.querySelector(`[col-id=\"#P\"]`)?.innerText.trim() || '';\n        const modelCell = pinnedRow.querySelector(`[col-id=\"Model_Display\"]`);\n        rowData.model_name = modelCell?.innerText.trim() || '';\n        rowData.model_url = modelCell?.querySelector('a')?.href || '';\n        const columns = [\n            { key: 'ugi_score', id: 'UGI 🏆' },\n            { key: 'w10_score', id: 'W/10 👍' },\n            { key: 'Unruly', id: 'Unruly' },\n            { key: 'coding_score', id: 'Coding 💻' },\n            { key: 'polContro_score', id: 'Societal/Political' },\n            { key: 'internet_score', id: 'Internet' },\n        ];\n        const promises = columns.map(col => getCellValue(centerRow, col.id).then(value => rowData[col.key] = value));\n        await Promise.all(promises);\n        return rowData;\n    }\n    function updateResultsContainer(rowData) {\n        try {\n            const row = document.createElement('div');\n            row.classList.add('model-row');\n            row.innerHTML = `\n                <div class=\"rank\">${rowData.rank}</div>\n                <div class=\"P\">${rowData['#P']}</div>\n                <div class=\"model-name\">\n                    <a href=\"${rowData.model_url}\" target=\"_blank\">${rowData.model_name}</a>\n                </div>\n                <div class=\"ugi-score\">${rowData.ugi_score}</div>\n                <div class=\"w10-score\">${rowData.w10_score}</div>\n                <div class=\"unruly\">${rowData.Unruly}</div>\n                <div class=\"coding-score\">${rowData.coding_score}</div>\n                <div class=\"polcontro-score\">${rowData.polContro_score}</div>\n                <div class=\"internet\">${rowData.internet_score}</div>\n                <div class=\"test-date\">${rowData.test_date}</div>\n            `;\n            resultsContainer.appendChild(row);\n        } catch (error) {\n            console.error('Error updating results container:', error);\n        }\n    }\n    async function processVisibleRows() {\n        const allRows = document.querySelectorAll('.ag-pinned-left-cols-container .ag-row');\n        const newDataPromises = [];\n        allRows.forEach(row => {\n            const rowIndex = row.getAttribute('row-index');\n            if (!rowIndex || collectedData.has(rowIndex)) return;\n            collectedData.add(rowIndex);\n            newDataPromises.push(extractRowData(rowIndex).then(rowData => {\n                if (rowData) {\n                    extractedRows.push(rowData);\n                    updateResultsContainer(rowData);\n                }\n            }));\n        });\n        await Promise.all(newDataPromises);\n    }\n    async function scrollAndExtractRows() {\n        const gridBody = gridDiv.querySelector('.ag-body-viewport');\n        let lastScrollTop = -1;\n        let scrollAttempts = 0;\n        const maxScrollAttempts = 50;\n        console.log('Starting optimized scrolling...');\n        function smoothScroll() {\n            return new Promise(resolve => {\n                let step = 0;\n                function scrollStep() {\n                    if (step >= 10) return resolve();\n                    gridBody.scrollTop += gridBody.clientHeight / 10;\n                    step++;\n                    requestAnimationFrame(scrollStep);\n                }\n                scrollStep();\n            });\n        }\n        while (scrollAttempts < maxScrollAttempts) {\n            console.log(`Scroll attempt ${scrollAttempts + 1}...`);\n            const currentScrollTop = gridBody.scrollTop;\n            await smoothScroll();\n            if (gridBody.scrollTop === currentScrollTop) {\n                console.log('No new rows detected. Stopping.');\n                break;\n            }\n            lastScrollTop = gridBody.scrollTop;\n            await processVisibleRows();\n            scrollAttempts++;\n        }\n        console.log(`Finished scrolling. Total extracted rows: ${extractedRows.length}`);\n    }\n    function observeTableChanges() {\n        const observer = new MutationObserver(async () => {\n            await processVisibleRows();\n        });\n        observer.observe(gridDiv, { childList: true, subtree: true });\n        console.log('MutationObserver attached.');\n    }\n    observeTableChanges();\n    scrollAndExtractRows();\n})()\n);"

        ],
        "url": "https://dontplantoend-ugi-leaderboard.hf.space/?__theme=light",
        "baseSelector": "#leaderboard-grid",
        "name": "UGI Leaderboard"
    },
    "vllm": {
        "schema": {
            "name": "leaderboard",
            "baseSelector": ".model-row",
            "fields": [
                {
                    "name": "rank",
                    "selector": ".model-rank",
                    "type": "text"
                },
                {
                    "name": "name",
                    "selector": ".model-name a",
                    "type": "text"
                },
                {
                    "name": "url",
                    "selector": ".model-name a",
                    "type": "attribute",
                    "attribute": "href"
                },
                {
                    "name": "param_b",
                    "selector": ".param-b",
                    "type": "text"
                },
                {
                    "name": "language_model",
                    "selector": ".language-model",
                    "type": "text"
                },
                {
                    "name": "vision_model",
                    "selector": ".vision-model",
                    "type": "text"
                },
                {
                    "name": "eval_date",
                    "selector": ".eval-date",
                    "type": "text"
                },
                {
                    "name": "avg_score",
                    "selector": ".avg-score",
                    "type": "text"
                },
                {
                    "name": "avg_rank",
                    "selector": ".avg-rank",
                    "type": "text"
                },
                {
                    "name": "mmbench_v11",
                    "selector": ".mmbench-v11",
                    "type": "text"
                },
                {
                    "name": "mmstar",
                    "selector": ".mmstar",
                    "type": "text"
                },
                {
                    "name": "mmmu_val",
                    "selector": ".mmmu-val",
                    "type": "text"
                },
                {
                    "name": "mathvista",
                    "selector": ".mathvista",
                    "type": "text"
                },
                {
                    "name": "ocrbench",
                    "selector": ".ocrbench",
                    "type": "text"
                },
                {
                    "name": "ai2d",
                    "selector": ".ai2d",
                    "type": "text"
                },
                {
                    "name": "hallusionbench",
                    "selector": ".hallusionbench",
                    "type": "text"
                },
                {
                    "name": "mmvet",
                    "selector": ".mmvet",
                    "type": "text"
                }
            ]
        },
        "wait_for": "\n    () => {\n    const table = document.querySelector('svelte-virtual-table-viewport table');\n    if (table && table.querySelectorAll('tr[slot=\"tbody\"]').length > 10) {\n        console.log(\"Table loaded with sufficient rows.\");\n        return true;\n    } else {\n        console.log(\"Waiting for table rows to load...\");\n        return false;\n    }\n};\n    ",
        "js_code": [
            "\n            (function checkTableBody() {\n                const tableBody = document.querySelector('svelte-virtual-table-viewport table');\n                console.log(\"Checking for table body...\", tableBody);\n    \n                if (tableBody) {\n                    console.log(\"tableBody found\", tableBody);\n                    const collectedData = [];\n    \n                    // Create or select the results container\n                    let resultsContainer = document.querySelector('.results-container');\n                    if (!resultsContainer) {\n                        resultsContainer = document.createElement('div');\n                        resultsContainer.classList.add('results-container');\n                        document.body.appendChild(resultsContainer);\n                    }\n    \n                    function extractData() {\n                        const rows = tableBody.querySelectorAll('tr[slot=\"tbody\"]');\n                        rows.forEach(row => {\n                            const cells = row.querySelectorAll('td');\n                            const modelName = cells[1]?.querySelector('a')?.innerText.trim() || '';\n    \n                            if (!collectedData.some(data => data.model_name === modelName)) {\n                                const rowData = {\n                                    rank: cells[0]?.innerText.trim() || '',\n                                    model_name: modelName,\n                                    model_url: cells[1]?.querySelector('a')?.href || '',\n                                    param_b: cells[2]?.innerText.trim() || '',\n                                    language_model: cells[3]?.innerText.trim() || '',\n                                    vision_model: cells[4]?.innerText.trim() || '',\n                                    eval_date: cells[5]?.innerText.trim() || '',\n                                    avg_score: cells[6]?.innerText.trim() || '',\n                                    avg_rank: cells[7]?.innerText.trim() || '',\n                                    mmbench_v11: cells[8]?.innerText.trim() || '',\n                                    mmstar: cells[9]?.innerText.trim() || '',\n                                    mmmu_val: cells[10]?.innerText.trim() || '',\n                                    mathvista: cells[11]?.innerText.trim() || '',\n                                    ocrbench: cells[12]?.innerText.trim() || '',\n                                    ai2d: cells[13]?.innerText.trim() || '',\n                                    hallusionbench: cells[14]?.innerText.trim() || '',\n                                    mmvet: cells[15]?.innerText.trim() || ''\n                                };\n                                collectedData.push(rowData);\n                            }\n                        });\n                    }\n    \n                    let scrollAttempts = 0;\n    \n                    function scrollTableBody() {\n                        const viewport = tableBody;\n                        tableBody.scrollTop += 300;\n    \n                        setTimeout(() => {\n                            const newScrollHeight = viewport.scrollHeight;\n    \n                            if (viewport.scrollTop + viewport.clientHeight >= newScrollHeight || scrollAttempts > 1000) {\n                                console.log(\"Reached the end or max attempts, stopping scroll.\");\n                                extractData(); // Final extraction in case of remaining items\n                                updateResultsContainer(); // Append extracted data to results container\n                            } else {\n                                console.log(\"Continuing to scroll...\");\n                                extractData();\n                                scrollAttempts++;\n                                scrollTableBody(); // Recursive call to keep scrolling\n                            }\n                        }, 500);\n                    }\n    \n                    function updateResultsContainer() {\n                        resultsContainer.innerHTML = ''; // Clear existing content\n                        console.log(\"Total records:\", collectedData.length);\n                        collectedData.forEach(rowData => {\n                            const row = document.createElement('div');\n                            row.classList.add('model-row');\n                            row.innerHTML = `\n                                <div class=\"model-rank\">${rowData.rank}</div>\n                                <div class=\"model-name\"><a href=\"${rowData.model_url}\" target=\"_blank\">${rowData.model_name}</a></div>\n                                <div class=\"param-b\">${rowData.param_b}</div>\n                                <div class=\"language-model\">${rowData.language_model}</div>\n                                <div class=\"vision-model\">${rowData.vision_model}</div>\n                                <div class=\"eval-date\">${rowData.eval_date}</div>\n                                <div class=\"avg-score\">${rowData.avg_score}</div>\n                                <div class=\"avg-rank\">${rowData.avg_rank}</div>\n                                <div class=\"mmbench-v11\">${rowData.mmbench_v11}</div>\n                                <div class=\"mmstar\">${rowData.mmstar}</div>\n                                <div class=\"mmmu-val\">${rowData.mmmu_val}</div>\n                                <div class=\"mathvista\">${rowData.mathvista}</div>\n                                <div class=\"ocrbench\">${rowData.ocrbench}</div>\n                                <div class=\"ai2d\">${rowData.ai2d}</div>\n                                <div class=\"hallusionbench\">${rowData.hallusionbench}</div>\n                                <div class=\"mmvet\">${rowData.mmvet}</div>\n                            `;\n                            resultsContainer.appendChild(row);\n                        });\n                        console.log(\"Data appended to results container.\");\n                    }\n    \n                    extractData();\n                    scrollTableBody();\n    \n                } else {\n                    console.log(\"Table body not found, retrying in 500 ms...\");\n                    setTimeout(checkTableBody, 500); // Retry after 500 ms if tableBody is not found\n                }\n            })();\n            "
        ],
        "url": "https://opencompass-open-vlm-leaderboard.hf.space/?__theme=light",
        "baseSelector": "svelte-virtual-table-viewport table",
        "name": "VLLM Leaderboard"
    },
    "chatbot_arena": {
        "schema": {
            "name": "leaderboard",
            "baseSelector": ".model-row",
            "fields": [
                {
                    "name": "rank_ub",
                    "selector": ".rank-ub",
                    "type": "text"
                },
                {
                    "name": "rank_style_ctrl",
                    "selector": ".rank-style-ctrl",
                    "type": "text"
                },
                {
                    "name": "name",
                    "selector": ".model-name a",
                    "type": "text"
                },
                {
                    "name": "url",
                    "selector": ".model-name a",
                    "type": "attribute",
                    "attribute": "href"
                },
                {
                    "name": "arena_score",
                    "selector": ".arena-score",
                    "type": "text"
                },
                {
                    "name": "confidence_interval",
                    "selector": ".confidence-interval",
                    "type": "text"
                },
                {
                    "name": "votes",
                    "selector": ".votes",
                    "type": "text"
                },
                {
                    "name": "organization",
                    "selector": ".organization",
                    "type": "text"
                },
                {
                    "name": "license",
                    "selector": ".license",
                    "type": "text"
                },
                {
                    "name": "knowledge_cutoff",
                    "selector": ".knowledge-cutoff",
                    "type": "text"
                }
            ]
        },
        "wait_for": "\n    () => {\n    const table = document.querySelector('svelte-virtual-table-viewport table');\n    if (table && table.querySelectorAll('tr[slot=\"tbody\"]').length > 10) {\n        console.log(\"Table loaded with sufficient rows.\");\n        return true;\n    } else {\n        console.log(\"Waiting for table rows to load...\");\n        return false;\n    }\n};\n    ",
        "js_code": [
            "\n          (function checkTableBody() {\n        const potentialTableClasses = [\n            '.table.svelte-82jkx',\n            '.svelte-1oa6fve.fixed-layout',\n            'svelte-virtual-table-viewport table',\n            '.svelte-1oa6fve'\n        ];\n    \n        let tableBody;\n        for (const tableClass of potentialTableClasses) {\n            tableBody = document.querySelector(tableClass);\n            if (tableBody) break;\n        }\n    \n        console.log(\"Checking for table body...\", tableBody);\n    \n        if (tableBody) {\n            console.log(\"tableBody found\", tableBody);\n            const collectedData = [];\n    \n            // Create or select the results container\n            let resultsContainer = document.querySelector('.results-container');\n            if (!resultsContainer) {\n                resultsContainer = document.createElement('div');\n                resultsContainer.classList.add('results-container');\n                document.body.appendChild(resultsContainer);\n            }\n    \n            function extractData() {\n                const rows = tableBody.querySelectorAll('tr[slot=\"tbody\"]');\n                rows.forEach(row => {\n                    const cells = row.querySelectorAll('td');\n                    const modelName = cells[2]?.querySelector('a')?.innerText.trim() || '';\n    \n                    if (!collectedData.some(data => data.model_name === modelName)) {\n                        const rowData = {\n                            rank_ub: cells[0]?.innerText.trim() || '',\n                            rank_style_ctrl: cells[1]?.innerText.trim() || '',\n                            model_name: modelName,\n                            model_url: cells[2]?.querySelector('a')?.href || '',\n                            arena_score: cells[3]?.innerText.trim() || '',\n                            confidence_interval: cells[4]?.innerText.trim() || '',\n                            votes: cells[5]?.innerText.trim() || '',\n                            organization: cells[6]?.innerText.trim() || '',\n                            license: cells[7]?.innerText.trim() || '',\n                            knowledge_cutoff: cells[8]?.innerText.trim() || ''\n                        };\n                        collectedData.push(rowData);\n                    }\n                });\n            }\n    \n            let scrollAttempts = 0;\n    \n            function scrollTableBody() {\n                const viewport = tableBody;\n                tableBody.scrollTop += 300;\n    \n                setTimeout(() => {\n                    const newScrollHeight = viewport.scrollHeight;\n    \n                    if (viewport.scrollTop + viewport.clientHeight >= newScrollHeight || scrollAttempts > 1000) {\n                        console.log(\"Reached the end or max attempts, stopping scroll.\");\n                        extractData();\n                        updateResultsContainer();\n                    } else {\n                        console.log(\"Continuing to scroll...\");\n                        extractData();\n                        scrollAttempts++;\n                        scrollTableBody();\n                    }\n                }, 500);\n            }\n    \n            function updateResultsContainer() {\n                resultsContainer.innerHTML = '';\n                console.log(\"Total records:\", collectedData.length);\n                collectedData.forEach(rowData => {\n                    const row = document.createElement('div');\n                    row.classList.add('model-row');\n                    row.innerHTML = `\n                        <div class=\"rank-ub\">${rowData.rank_ub}</div>\n                        <div class=\"rank-style-ctrl\">${rowData.rank_style_ctrl}</div>\n                        <div class=\"model-name\"><a href=\"${rowData.model_url}\" target=\"_blank\">${rowData.model_name}</a></div>\n                        <div class=\"arena-score\">${rowData.arena_score}</div>\n                        <div class=\"confidence-interval\">${rowData.confidence_interval}</div>\n                        <div class=\"votes\">${rowData.votes}</div>\n                        <div class=\"organization\">${rowData.organization}</div>\n                        <div class=\"license\">${rowData.license}</div>\n                        <div class=\"knowledge-cutoff\">${rowData.knowledge_cutoff}</div>\n                    `;\n                    resultsContainer.appendChild(row);\n                });\n                console.log(\"Data appended to results container.\");\n            }\n    \n            extractData();\n            scrollTableBody();\n    \n        } else {\n            console.log(\"Table body not found, retrying in 500 ms...\");\n            setTimeout(checkTableBody, 500);\n        }\n    })();\n    \n            "
        ],
        "url": "https://lmarena-ai-chatbot-arena-leaderboard.hf.space/",
        "baseSelector": null,
        "name": "Chatbot arena Leaderboard"
    },
    "llm_stats": {
        "schema": {
            "name": "leaderboard",
            "baseSelector": ".model-row",
            "fields": [
                {"name": "organization", "selector": ".organization", "type": "text"},
                {"name": "model", "selector": ".model", "type": "text"},
                {"name": "model_url", "selector": ".model-url", "type": "text"},
                {"name": "license", "selector": ".license", "type": "text"},
                {"name": "params", "selector": ".params", "type": "text"},
                {"name": "max_input_tokens", "selector": ".max-input-tokens", "type": "text"},
                {"name": "input_cost", "selector": ".input-cost", "type": "text"},
                {"name": "output_cost", "selector": ".output-cost", "type": "text"},
                {"name": "gpqa", "selector": ".gpqa", "type": "text"},
                {"name": "mmlu", "selector": ".mmlu", "type": "text"},
                {"name": "mmlu_pro", "selector": ".mmlu-pro", "type": "text"},
                {"name": "drop", "selector": ".drop", "type": "text"},
                {"name": "humaneval", "selector": ".humaneval", "type": "text"},
                {"name": "multimodal", "selector": ".multimodal", "type": "text"},
                {"name": "description", "selector": ".description", "type": "text"},
                {"name": "throughput", "selector": ".throughput", "type": "text"},
                {"name": "release_date", "selector": ".release-date", "type": "text"},
                {"name": "knowledge_cutoff", "selector": ".knowledge-cutoff", "type": "text"},
                {"name": "max_output_tokens", "selector": ".max-ouput-tokens", "type": "text"},
                {"name": "training_tokens", "selector": ".training-tokens", "type": "text"},
                {"name": "num_params", "selector": ".num-params", "type": "text"},
                {"name": "api_ref_link", "selector": ".api-ref-link", "type": "text"},
                {"name": "repo_link", "selector": ".repo-link", "type": "text"},
                {"name": "paper_link", "selector": ".paper-link", "type": "text"},
                {"name": "weights_link", "selector": ".weights-link", "type": "text"}
            ]
        },
        "url": "https://llm-stats.com/",
        "name": "LLM Stats Leaderboard",
        "js_code": ["(\nasync function scrapePaginatedTable() {\n    const delay = (ms) => new Promise(res => setTimeout(res, ms));\n    const collectedData = [];\n\n    async function fetchModelDetails(url) {\n        try {\n            const apiRes = await fetch(`https://llm-stats.com/api${url}`);\n            const apiData = await apiRes.json();\n\n            return {\n                description: apiData.description,\n                throughput: apiData.throughput,\n                release_date: apiData.release_date,\n                knowledge_cutoff: apiData.knowledge_cutoff,\n                max_output_tokens: apiData.output_context_size,\n                max_input_tokens: apiData.input_context_size,\n                training_tokens: apiData.training_tokens,\n                num_params: apiData.param_count,\n                api_ref_link: apiData.api_ref_link,\n                repo_link: apiData.repo_link,\n                paper_link: apiData.paper_link,\n                weights_link: apiData.weights_link,\n                license: apiData.license\n            };\n        } catch (err) {\n            console.error(`❌ Error fetching model detail page (${url})`, err);\n            return null;\n        }\n    }\n\n    function extractRows() {\n        const rows = document.querySelectorAll('tbody tr');\n        rows.forEach(row => {\n            const cols = row.querySelectorAll('td');\n            const getText = (selector, el = row) => el.querySelector(selector)?.innerText.trim() || '';\n            const getAttr = (selector, attr, el = row) => el.querySelector(selector)?.getAttribute(attr) || '';\n\n            const rowData = {\n                organization: getAttr(\"td:nth-child(1) img\", \"title\"),\n                model: getText(\"td:nth-child(2) a\"),\n                model_url: getAttr(\"td:nth-child(2) a\", \"href\"),\n                params: cols[3]?.innerText.trim() || '',\n                input_cost: cols[5]?.innerText.trim() || '',\n                output_cost: cols[6]?.innerText.trim() || '',\n                gpqa: cols[7]?.innerText.trim() || '',\n                mmlu: cols[8]?.innerText.trim() || '',\n                mmlu_pro: cols[9]?.innerText.trim() || '',\n                drop: cols[10]?.innerText.trim() || '',\n                humaneval: cols[11]?.innerText.trim() || '',\n                multimodal: cols[12]?.innerText.trim() || ''\n            };\n\n            if (rowData.model_url && !rowData.model_url.startsWith(\"http\")) {\n                rowData.model_url = location.origin + rowData.model_url;\n            }\n            collectedData.push(rowData);\n        });\n    }\n\n    async function scrapeAllPages() {\n        let hasNextPage = true;\n        while (hasNextPage) {\n            console.log(\"Extracting page data...\");\n            await delay(2000);\n            extractRows();\n\n            const nextButton = Array.from(document.querySelectorAll(\"button\"))\n                .find(btn => btn.textContent.trim() === \"Next\" && !btn.disabled);\n\n            if (!nextButton) {\n                console.log(\"No more pages to scrape.\");\n                hasNextPage = false;\n                console.log(\"Total records collected:\", collectedData.length);\n            } else {\n                console.log(\"Moving to next page...\");\n                nextButton.click();\n                await delay(2000);\n            }\n        }\n    }\n\n    async function enrichWithModelDetails() {\n        for (let i = 0; i < collectedData.length; i++) {\n            const row = collectedData[i];\n            if (row.model_url) {\n                console.log(`🔍 Fetching details for ${row.model} (${row.model_url})...`);\n                const urlPath = new URL(row.model_url).pathname;\n                const details = await fetchModelDetails(urlPath);\n                Object.assign(row, details);\n            }\n        }\n    }\n\n    function updateResultsContainer() {\n        let resultsContainer = document.querySelector('.results-container');\n        if (!resultsContainer) {\n            resultsContainer = document.createElement('div');\n            resultsContainer.classList.add('results-container');\n            document.body.appendChild(resultsContainer);\n        }\n\n        resultsContainer.innerHTML = '';\n        console.log(\"Total records collected in res:\", collectedData.length);\n\n        collectedData.forEach(rowData => {\n            const row = document.createElement('div');\n            row.classList.add('model-row');\n            row.innerHTML = `\n                <div class=\"organization\">${rowData.organization}</div>\n                <div class=\"model\">${rowData.model}</div>\n                <div class=\"model-url\">${rowData.model_url}</div>\n                <div class=\"license\">${rowData.license}</div>\n                <div class=\"params\">${rowData.params}</div>\n                <div class=\"max-input-tokens\">${rowData.max_input_tokens}</div>\n                <div class=\"input-cost\">${rowData.input_cost}</div>\n                <div class=\"output-cost\">${rowData.output_cost}</div>\n                <div class=\"gpqa\">${rowData.gpqa}</div>\n                <div class=\"mmlu\">${rowData.mmlu}</div>\n                <div class=\"mmlu-pro\">${rowData.mmlu_pro}</div>\n                <div class=\"drop\">${rowData.drop}</div>\n                <div class=\"humaneval\">${rowData.humaneval}</div>\n                <div class=\"multimodal\">${rowData.multimodal}</div>\n                <div class=\"description\">${rowData.description}</div>\n                <div class=\"max-ouput-tokens\">${rowData.max_output_tokens}</div>\n                <div class=\"num-params\">${rowData.num_params}</div>\n                <div class=\"repo-link\">${rowData.repo_link}</div>\n                <div class=\"paper-link\">${rowData.paper_link}</div>\n                <div class=\"knowledge-cutoff\">${rowData.knowledge_cutoff}</div>\n                <div class=\"throughput\">${rowData.throughput}</div>\n                <div class=\"release-date\">${rowData.release_date}</div>\n                <div class=\"training-tokens\">${rowData.training_tokens}</div>\n                <div class=\"api-ref-link\">${rowData.api_ref_link}</div>\n                <div class=\"weights-link\">${rowData.weights_link}</div>\n            `;\n            resultsContainer.appendChild(row);\n        });\n\n        console.log(\"Data appended to results container.\", resultsContainer);\n    }\n\n    await scrapeAllPages();\n    await enrichWithModelDetails();\n    updateResultsContainer();\n\n})();"],
        "wait_for": null,
        "baseSelector":null
    }
}