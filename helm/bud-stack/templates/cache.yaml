{{- if .Values.services.cache.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:alpine
        ports:
        - containerPort: 6379
        command: ["redis-server", "--requirepass", "{{ .Values.services.cache.redis.password }}"]
        volumeMounts:
        - mountPath: /data                     # Redis data directory
          name: redis-storage
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
{{- end }}
---
{{- if .Values.services.cache.enabled }}
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv
  namespace: {{ .Values.namespace }}
spec:
  capacity:
    storage: {{ .Values.services.cache.redis.storage.size }}
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.services.cache.redis.storage.storageClassName | quote }}
  hostPath:
    path: {{ .Values.services.cache.redis.storage.hostPath }}
{{- end }}
---
{{- if .Values.services.cache.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: {{ .Values.namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.services.cache.redis.storage.size | quote }}  # Quote the value for safety
  storageClassName: {{ .Values.services.cache.redis.storage.storageClassName | quote }}
{{- end }}
---
{{- if .Values.services.cache.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: {{ .Values.namespace }}
spec:
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    app: redis
  type: ClusterIP
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bud-litellm-redis-stack
  labels:
    app: bud-litellm-redis-stack
spec:
  replicas: {{ .Values.redisStack.replicaCount }}
  selector:
    matchLabels:
      app: bud-litellm-redis-stack
  template:
    metadata:
      labels:
        app: bud-litellm-redis-stack
    spec:
      # securityContext:
      #   sysctls:
      #     - name: net.core.somaxconn
      #       value: "1024"
      containers:
        - name: redis
          image: "{{ .Values.redisStack.image.repository }}:{{ .Values.redisStack.image.tag }}"
          imagePullPolicy: {{ .Values.redisStack.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.redisStack.service.port }}
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secret
                  key: password
          command: {{ .Values.redisStack.command | toYaml | nindent 12 }}
          volumeMounts:
            - mountPath: /data
              name: redis-storage
          resources:
            limits:
              cpu: {{ .Values.redisStack.resources.limits.cpu }}
              memory: {{ .Values.redisStack.resources.limits.memory }}
            requests:
              cpu: {{ .Values.redisStack.resources.requests.cpu }}
              memory: {{ .Values.redisStack.resources.requests.memory }}
      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
type: Opaque
data:
  password: {{ .Values.redisStack.auth.password | b64enc }}
---
apiVersion: v1
kind: Service
metadata:
  name: bud-litellm-redis-stack
spec:
  selector:
    app: bud-litellm-redis-stack
  ports:
    - protocol: TCP
      port: {{ .Values.redisStack.service.port }}
      targetPort: {{ .Values.redisStack.service.port }}
  type: {{ .Values.redisStack.service.type }}