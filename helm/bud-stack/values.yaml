namespace: dapr-system

replicaCount: 1

globalEnv:
  configMapName: bud-global-config
  data:
    # Base config
    PORT: "3000"
    REDIS_CACHE_SERVICE_HOST: ""
    S3_BUCKET_NAME: "novu-local"
    JWT_SECRET: "a173a1378b1089d2a24a76502bdce4905fe69b71efdfe95d9f1fdfc5110f78f3"
    SENTRY_DSN: ""
    REDIS_PASSWORD: "budpassword"
    MONGO_MIN_POOL_SIZE: "100"
    API_CONTEXT_PATH: ""
    WEB_CONTEXT_PATH: ""
    MONGO_MAX_POOL_SIZE: "200"
    WIDGET_URL: "http://web.dapr-system:4200"
    S3_REGION: "us-east-1"
    GLOBAL_CONTEXT_PATH: ""
    AWS_ACCESS_KEY_ID: "test"
    STORE_ENCRYPTION_KEY: "050c6a4e1ee59527f68729ce87f06562"
    AWS_SECRET_ACCESS_KEY: "test"
    REDIS_HOST: "redis-service.dapr-system"
    REDIS_PORT: "6379"
    WIDGET_EMBED_PATH: "http://embed:4701/embed.umd.min.js"
    FRONT_BASE_URL: "http://web.dapr-system:4200"
    REDIS_DB_INDEX: "2"
    DOCKER_REDIS_SERVICE_PORT: "6379"
    NODE_ENV: "production"
    MONGO_URL: "mongodb://root:secret@mongodb-service:27017/novu-db?authSource=admin"
    WS_CONTEXT_PATH: ""
    IS_TOPIC_NOTIFICATION_ENABLED: "true"
    DISABLE_USER_REGISTRATION: "false"
    WS_PORT: "3000"
    IS_MULTI_TENANCY_ENABLED: "true"
    S3_LOCAL_STACK: "http://localhost:4566"
    API_ROOT_URL: "http://api.dapr-system:3000"
    NEW_RELIC_LICENSE_KEY: "47d729d903a431e73598eb03eda7322eFFFFNRAL"
    HOST_NAME: "http://web.dapr-system:4200"
    REDIS_CACHE_SERVICE_PORT: "6379"
    REACT_APP_WS_URL: "http://ws.dapr-system:3000"
    NODE_VERSION: "20.11.1"
    YARN_VERSION: "1.22.19"
    NX_DAEMON: "false"
    CI: "true"
    NEW_RELIC_NO_CONFIG_FILE: "true"
    NEW_RELIC_APP_NAME: "notify"
    LITELLM_MASTER_KEY: "sk-BudLiteLLMMasterKey_123"
    OPENAI_API_KEY: "sk-proj-1234"
    PERPLEXITY_API_KEY: ""
    BUD_LLM_BASE_URL: "http://172.184.137.177:8000/v1/"
    MINIO_ACCESS_KEY: "" # TODO: get from secret
    MINIO_SECRET_KEY: "" # TODO: get from secret
    ADD_MODEL_DIR: "/datadisk/add_model_dir"
    # App specific envs (removed prefixes and merged common envs)
    APP_CONFIG: "{}"
    API_BASE_URL: "http://chart-bud-api.dapr-system:3000"  # Merged
    CONFIGSTORE_NAME: "configstore" # Merged
    SECRETSTORE_NAME: "secretstore" # Merged
    SECRETSTORE_SECRET_NAME: "app-secrets" # Merged
    LOG_LEVEL: "DEBUG" # Merged , overriden by budsim
    NOTIFY_SERVICE_NAME: "notify" # Merged
    NOTIFY_SERVICE_TOPIC: "notificationMessages" # Merged
    NOVU_API_BASE_URL: "http://chart-bud-api.dapr-system:3000"
    PSQL_HOST: "postgresql-service.dapr-system" # Merged
    SECRETS_PSQL_USER: "myuser"  # Merged
    SECRETS_PSQL_PASSWORD: "" # TODO: get from secret # Merged
    PSQL_USER: "myuser" # Merged
    PSQL_PASSWORD: "" # TODO: get from secret # Merged
    PSQL_PORT: "5432" # Merged
    PSQL_POOL_SIZE: "100" # Merged
    
    PSQL_DB_NAME_BUDSIM: "budsim"
    POPULATION_SIZE: "5"
    GENERATION_COUNT: "10"
    VLLM_HPU_IMAGE: "budimages.azurecr.io/budecosystem/bud-runtime-hpu:latest"
    VLLM_CUDA_IMAGE: "aibrix/vllm-openai:v0.7.3.self.post1"
    VLLM_CPU_IMAGE: "budimages.azurecr.io/budecosystem/bud-runtime-cpu:0.09"
    MODEL_REGISTRY_DIR: "/data/models-registry"

      
    APP_NAME: 'budapp' # Merged
    POSTGRES_HOST: "172.24.0.1"
    SECRETS_PSQL_USER_BUDAPP: "buduser"
    SECRETS_PSQL_PASSWORD_BUDAPP: "" # TODO: get from secret
    POSTGRES_USER: "buduser"
    POSTGRES_PASSWORD: "" # TODO: get from secret
    SECRETS_POSTGRES_USER: "buduser"
    SECRETS_POSTGRES_PASSWORD: "" # TODO: get from secret
    POSTGRES_DB: "budserve_dev"
    POSTGRES_PORT_BUDAPP: "5432"
    POSTGRES_DB_NAME_BUDAPP: "budserve_dev"
    PGADMIN_DEFAULT_EMAIL: "user@bud.studio"
    PGADMIN_DEFAULT_PASSWORD: "" # TODO: get from secret
    PGADMIN_PORT: "8888"
    SUPER_USER_EMAIL: "admin@bud.studio"
    SUPER_USER_PASSWORD: "admin@budserve"
    PASSWORD_SALT: "" # TODO: get from secret
    JWT_SECRET_KEY: "" # TODO: get from secret
    CORS_ORIGINS: "https://localhost:3000"
    APP_PORT_BUDAPP: 9082
    DAPR_BASE_URL: "http://localhost:3500"
    DAPR_HOST_IP: "127.0.0.1"
    BUD_METRICS_APP_ID: "budmetrics"
    BUD_NOTIFY_APP_ID: "notify"
    MODEL_DOWNLOAD_DIR: "/data/models-registry"
    REDIS_URI: "redis-service.dapr-system:6379"
    REDIS_PASSWORD_BUDAPP: "" # TODO: get from secret
    BUD_SIMULATOR_APP_ID: "budsim"
    PROMETHEUS_URL: "" # TODO: get from secret

      
    BUD_CLUSTER_APP_ID: "budcluster"
    BUD_MODEL_APP_ID: "budmodel"
    PSQL_DB_NAME_BUDCLUSTER: "budcluster"
    VALIDATE_CERTS: "false"
    NODE_INFO_COLLECTOR_IMAGE_CPU: "budimages.azurecr.io/budecosystem/node-info-collector-cpu:latest"
    NODE_INFO_COLLECTOR_IMAGE_CUDA: "budimages.azurecr.io/budecosystem/node-info-collector-cuda:latest"
    NODE_INFO_COLLECTOR_IMAGE_HPU: "budimages.azurecr.io/budecosystem/node-info-collector-hpu:latest"
    NODE_INFO_LABELER_IMAGE: "budimages.azurecr.io/budecosystem/node-device-labeler:latest"
    ENGINE_CONTAINER_PORT: "8000"
    REGISTRY_SERVER: "" # TODO: get from secret
    REGISTRY_USERNAME: "" # TODO: get from secret
    REGISTRY_PASSWORD: "" # TODO: get from secret
    LITELLM_PROXY_SERVER_IMAGE: "ghcr.io/berriai/litellm:main-latest"
    BUD_SERVE_URL: "" # TODO: get from secret
    RSA_KEY_NAME: "rsa-private-key.pem"
    MINIO_BUCKET: "models-registry"
    MINIO_ENDPOINT: "" # TODO: get from secret
    MINIO_SECURE: "true"

    
    PSQL_DB_NAME_BUDMODEL: "budmodel"

    PSQL_PORT_BUDMETRICS: "5431"
    PSQL_DB_NAME_BUDMETRICS: "budmetrics"
      
    LITELLM_LOG: "INFO"
    LITELLM_SALT_KEY: "litellm_salt_key"
    DATABASE_URL: "postgresql://myuser:mypassword@postgresql-service.dapr-system:5432/budproxy"
    STORE_MODEL_IN_DB: "true"
    BUDSERVE_APP_BASEURL: "http://localhost:3500/v1.0/invoke/budapp/method"
    ENABLE_CACHE: "true"
    ENABLE_CACHE_METRIC: "true"
    CACHE_EVICTION_POLICY: "LRU"
    CACHE_MAX_SIZE: "1000"
    CACHE_TTL: "3600"
    CACHE_SCORE_THRESHOLD: "0.8"
    CACHE_EMBEDDING_MODEL: "sentence-transformers/all-MiniLM-L6-v2"
    REDIS_USERNAME: ""
    REDIS_DB: "0"
    NAMESPACE: "DEVELOPMENT"
    APP_PORT_BUDPROXY: "4000"
    SECRETS_REDIS_URI: "redis-service.dapr-system:6379"
    CACHE_REDIS_HOST: "bud-litellm-redis-stack.dapr-system"
    CACHE_REDIS_PORT: "6379"
    CACHE_REDIS_PASSWORD: "" # TODO: get from secret
    SECRETS_CACHE_REDIS_PASSWORD: "" # TODO: get from secret

minio:
  replicas: 3
  rootUser: "" # TODO: get from secret
  rootPassword: "" # TODO: get from secret
  buckets:
    - name: budstore
      policy: none
      purge: false
      versioning: false
      objectlocking: false
  persistence:
    size: 20Gi

Image:
  repository: "ghcr.io/novuhq/novu"
  tag: "0.24.0"
  
mongodb:
  initdbRootUsername: "" # TODO: get from secret
  initdbRootPassword: "" # TODO: get from secret
  storage:
    size: 5Gi
    storageClassName: local-path
    hostPath: "/datadisk/pvc/mongodb-data"

dapr:
  logLevel: DEBUG
  configStoreName: configstore
  secretStoreName: secretstore
  secretName: app-secrets
  apiToken: "" # TODO: get from secret
  novuApiBaseUrl: "http://chart-bud-api.dapr-system:3000"

apps:
  - name: "notify"
    namespace: "dapr-system"
    image: "docker.io/budecosystem/budnotify:latest"
    containerPort: 3000
    daprAppId: "notify"
    pvcName: "bud-notify-1"
    pvcPath: "/datadisk/pvc/bud-notify-pv"
    appTopic: "notificationMessages"
    appTopicRoute: "/notifications"
    envFrom: bud-global-config
    resources:
      limits:
        memory: "512Mi"
        cpu: "500m"
      requests:
        memory: "256Mi"
        cpu: "250m"
    command: "uvicorn notify.main:app --host 0.0.0.0 --port"
  - name: "budsim"
    namespace: "dapr-system"
    image: "docker.io/budecosystem/budsim:latest"
    containerPort: 3002
    daprAppId: "budsim"
    pvcName: "bud-budsim-1"
    pvcPath: "/datadisk/pvc/bud-budsim-pv"
    appTopic: "budSimMessages"
    appTopicRoute: "/notifications"
    env:
    - name: LOG_LEVEL
      value: "INFO" #overriding the global one
    - name: PSQL_DB_NAME
      value: "budsim" #overriding the global one
    - name: DAPR_HOST_IP
      value: "127.0.0.1"
    envFrom: bud-global-config
    resources:
      limits:
        memory: "32768Mi"
        cpu: "2"
      requests:
        memory: "256Mi"
        cpu: "250m"
    command: "apt update -y && apt install socat -y && (socat TCP-LISTEN:3600,fork TCP:127.0.0.1:50001 &) && alembic upgrade head && uvicorn budsim.main:app --host 0.0.0.0 --port"
    volumes:
      - name: models-registry
        mountPath: "/data/models-registry"
  - name: "budapp"
    namespace: "dapr-system"
    image: "docker.io/budecosystem/budapp:latest"
    containerPort: 9082
    daprAppId: "budapp"
    pvcName: "bud-budserve-app-1"
    pvcPath: "/datadisk/pvc/bud-budserve-app-pv"
    appTopic: "budAppMessages"
    appTopicRoute: "/notifications"
    envFrom: bud-global-config
    env:
    - name: APP_CONFIG
      value: "{}"  # Dapr will inject the configuration values
    - name: PSQL_HOST
      value: "172.24.0.1"
    - name: SECRETS_PSQL_USER
      value: "buduser"
    - name: SECRETS_PSQL_PASSWORD
      value: "" # TODO: get from secret
    - name: PSQL_USER
      value: "buduser"
    - name: PSQL_PASSWORD
      value: "" # TODO: get from secret
    - name: SECRETS_POSTGRES_USER
      value: "buduser"
    - name: SECRETS_POSTGRES_PASSWORD
      value: "" # TODO: get from secret
    - name: POSTGRES_USER
      value: "buduser"
    - name: POSTGRES_PASSWORD
      value: "" # TODO: get from secret
    - name: PSQL_PORT
      value: "5432"
    - name: PSQL_DB_NAME
      value: "budserve_dev"
    - name: HF_TOKEN
      value: "" # TODO: get from secret
    - name: SECRETS_HF_TOKEN
      value: "" # TODO: get from secret
    - name: AES_KEY_HEX
      value: "" # TODO: get from secret
    - name: PRIVATE_KEY_PASSWORD
      value: "" # TODO: get from secret
    - name: STATIC_DIR
      value: "/data/static-dir"
    resources:
      limits:
        memory: "32768Mi"
        cpu: "2"
      requests:
        memory: "256Mi"
        cpu: "250m"
    command: "uvicorn budapp.main:app --host 0.0.0.0 --port"
    volumes:
      - name: add-dir-budmo
        mountPath: "/datadisk/add_model_dir"
      - name: static-dir
        mountPath: "/data/static-dir"
  - name: "budcluster"
    namespace: "dapr-system"
    image: "docker.io/budecosystem/budcluster:latest"
    containerPort: 3003
    daprAppId: "budcluster"
    pvcName: "budcluster-1"
    pvcPath: "/datadisk/pvc/budcluster-pv"
    appTopic: "budClusterMessages"
    appTopicRoute: "/notifications"
    enableCrypto: true
    envFrom: bud-global-config
    resources:
      limits:
        memory: "32768Mi"
        cpu: "1"
      requests:
        memory: "256Mi"
        cpu: "250m"
    command: "alembic -c ./budcluster/alembic.ini upgrade head && uvicorn budcluster.main:app --host 0.0.0.0 --port"
    volumes:
      - name: crypto-keys
        mountPath: "/root/.cache/budserve/keys"
      - name: models-registry
        mountPath: "/data/models-registry"
    env:
    - name: APP_CONFIG
      value: "{}"  # Dapr will inject the configuration values
    - name: NOTIFY_SERVICE_NAME
      value: "notify"
    - name: NOTIFY_SERVICE_TOPIC
      value: "notificationMessages"
    - name: CONFIGSTORE_NAME
      value: "configstore"
    - name: SECRETSTORE_SECRET_NAME
      value: "app-secrets"
    - name: LOG_LEVEL
      value: "DEBUG"
    - name: PSQL_HOST
      value: "postgresql-service.dapr-system"
    - name: SECRETS_PSQL_USER
      value: "myuser"
    - name: SECRETS_PSQL_PASSWORD
      value: "" # TODO: get from secret
    - name: PSQL_USER
      value: "myuser"
    - name: PSQL_PASSWORD
      value: "" # TODO: get from secret
    - name: PSQL_PORT
      value: "5432"
    - name: PSQL_DB_NAME
      value: "budcluster"
    - name: VALIDATE_CERTS
      value: "false"
    - name: NODE_INFO_COLLECTOR_IMAGE_CPU
      value: "budimages.azurecr.io/budecosystem/node-info-collector-cpu:latest"
    - name: NODE_INFO_COLLECTOR_IMAGE_CUDA
      value: "budimages.azurecr.io/budecosystem/node-info-collector-cuda:latest"
    - name: NODE_INFO_COLLECTOR_IMAGE_HPU
      value: "budimages.azurecr.io/budecosystem/node-info-collector-hpu:latest"
    - name: NODE_INFO_LABELER_IMAGE
      value: "budimages.azurecr.io/budecosystem/node-device-labeler:latest"
    - name: ENGINE_CONTAINER_PORT
      value: "8000"
    - name: REGISTRY_SERVER
      value: "" # TODO: get from secret
    - name: REGISTRY_USERNAME
      value: "" # TODO: get from secret
    - name: REGISTRY_PASSWORD
      value: "" # TODO: get from secret
    - name: LITELLM_PROXY_SERVER_IMAGE
      value: "ghcr.io/berriai/litellm:main-latest"
    # - name: SECRETS_LITELLM_MASTER_KEY
    #   value: "sk-BudLiteLLMMasterKey_123"
    - name: BUD_SERVE_URL
      value: "" # TODO: get from secret
    - name: RSA_KEY_NAME
      value: "rsa-private-key.pem"
    - name: MINIO_BUCKET
      value: "models-registry"
    - name: MINIO_ENDPOINT
      value: "" # TODO: get from secret
    - name: MINIO_SECURE
      value: "true"
    - name: PROMETHEUS_URL
      value: "" # TODO: get from secret
    - name: VOLUME_TYPE
      value: "nfs"
    - name: QUANTIZATION_JOB_IMAGE
      value: "budimages.azurecr.io/budecosystem/bud-quantization-cpu:0.02"

  - name: "budmodel"
    namespace: "dapr-system"
    image: "docker.io/budecosystem/budmodel:latest"
    containerPort: 3004
    daprAppId: "budmodel"
    pvcName: "budmodel-1"
    pvcPath: "/datadisk/pvc/budmodel-pv"
    appTopic: "budModelMessages"
    appTopicRoute: "/notifications"
    envFrom: bud-global-config
    env:
    - name: PSQL_HOST
      value: "postgresql-service.dapr-system"
    - name: PSQL_USER
      value: "myuser"
    - name: PSQL_PASSWORD
      value: "" # TODO: get from secret
    - name: PSQL_PORT
      value: "5432"
    - name: PSQL_DB_NAME
      value: "budmodel"
    - name: LOG_LEVEL
      value: "DEBUG"
    resources:
      limits:
        memory: "32768Mi"
        cpu: "1"
      requests:
        memory: "256Mi"
        cpu: "250m"
    command: "apt install clamav clamav-daemon -y && freshclam && sed -i 's|^LocalSocket .*|LocalSocket /tmp/clamd.ctl|' /etc/clamav/clamd.conf && nohup clamd -c /etc/clamav/clamd.conf && nohup aria2c --enable-rpc --rpc-listen-all --rpc-listen-port 6800 --dir /data/models-registry --max-concurrent-downloads 5 > aria2.log 2>&1 & sleep 2 && alembic -c ./alembic.ini upgrade head && uvicorn budmodel.main:app --host 0.0.0.0 --port"
    volumes:
      - name: models-registry
        mountPath: "/data/models-registry"
      - name: add-dir-budmo
        mountPath: "/datadisk/add_model_dir"

  - name: "budhardware"
    namespace: "dapr-system"
    image: "docker.io/budecosystem/hardware_usecase_sim:latest"
    containerPort: 8000
    envFrom: bud-global-config
    daprAppId: "budhardware"
    appTopic: "budhardware"
    DisableShell: True
    appTopicRoute: "/notifications" 
    resources:
      limits:
        memory: "512Mi"
        cpu: "1"
      requests:
        memory: "256Mi"
        cpu: "250m"
    command: '"uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8080"'
  - name: "budmetrics"
    namespace: "dapr-system"
    image: "docker.io/budecosystem/budmetrics:latest"
    containerPort: 3005
    daprAppId: "budmetrics"
    pvcName: "bud-budmetrics-1"
    pvcPath: "/datadisk/pvc/bud-budmetrics-pv"
    appTopic: "budMetricsMessages"
    appTopicRoute: "/notifications"
    envFrom: bud-global-config
    env:
    - name: PSQL_PORT
      value: 5431 #overriding the global one
    - name: PSQL_DB_NAME
      value: budmetrics #overriding the global one
    - name: PSQL_HOST
      value: postgresql-metrics-service.dapr-system #overriding the global one
    resources:
      limits:
        memory: "32768Mi"
        cpu: "2"
      requests:
        memory: "256Mi"
        cpu: "250m"
    command: "alembic -c ./alembic.ini upgrade head && uvicorn budmetrics.main:app --host 0.0.0.0 --port"
  - name: "budproxy"
    namespace: "dapr-system"
    image: "docker.io/budecosystem/budlitellm:development"
    containerPort: 4000
    daprAppId: "budproxy"
    pvcName: "bud-proxy"
    pvcPath: "/datadisk/pvc/bud-budproxy-pv"
    appTopic: "budProxyMessages"
    appTopicRoute: "/notifications"
    envFrom: bud-global-config
    env:
      - name: PSQL_HOST
        value: "postgresql-service.dapr-system"
      - name: PSQL_PORT
        value: "5432"
      - name: PSQL_DB_NAME
        value: "template0"
      - name: LITELLM_LOG
        value: "INFO"
      - name: LOG_LEVEL
        value: "INFO"
    resources:
      limits:
        memory: "20480Mi"
        cpu: "2"
      requests:
        memory: "1024Mi"
        cpu: "2"
    command: "cd litellm/proxy && litellm --config /app/litellm_config.yaml --port"
ingresses:
  - name: dapr-ingress
    host: "" # TODO: get from secret
    serviceName: dapr-dashboard
    servicePort: 8080
  - name: novu-ingress
    host: "" # TODO: get from secret
    serviceName: chart-bud-web
    servicePort: 4200
  - name: novu-api-ingress
    host: "" # TODO: get from secret
    serviceName: chart-bud-api
    servicePort: 3000
  - name: novu-ws-ingress
    host: "" # TODO: get from secret
    serviceName: chart-bud-ws
    servicePort: 3000
  - name: bud-notify-ingress
    host: "" # TODO: get from secret
    serviceName: notify-service
    servicePort: 3000
  - name: bud-app-ingress
    host: "" # TODO: get from secret
    serviceName: budapp-service
    servicePort: 9082
  - name: bud-sim-ingress
    host: "" # TODO: get from secret
    serviceName: bud-dapr-sim-service
    servicePort: 9082
  - name: bud-proxy-ingress
    host: "" # TODO: get from secret
    serviceName: budproxy-service
    servicePort: 4000
  - name: store-ingress
    host: "" # TODO: get from secret
    serviceName: chart-bud-minio
    servicePort: 9000
  - name: budhardware-ingress
    host: "" # TODO: get from secret
    serviceName: budhardware-service
    servicePort: 8000
  - name: keycloak-ingress
    host: "" # TODO: get from secret
    serviceName: keycloak
    servicePort: 80

services:
  database:
    enabled: true
    postgres:
      host: "postgresql-service.dapr-system"
      user: "myuser"
      password: "" # TODO: get from secret
      db: "mydatabase"
      additionalDbs:
        - "budcluster"
        - "budsim"
        - "budproxy"
    storage:
      size: 5Gi
      storageClassName: local-path
      hostPath: "/datadisk/pvc/postgresql-data"
  metrics:
    enabled: true
    postgres:
      host: "postgresql-metrics-service.dapr-system"
      user: "myuser"
      password: "" # TODO: get from secret
      db: "budmetrics"
    storage:
      size: 5Gi
      storageClassName: local-path
      hostPath: "/datadisk/pvc/postgresql-metrics-data"
  cache:
    enabled: true
    redis:
      host: "redis-service.dapr-system:6379"
      password: "" # TODO: get from secret
      storage:
        size: 5Gi
        storageClassName: local-path
        hostPath: "/datadisk/pvc/redis-data"

novu:
  credentials:
    email: "" # TODO: get from secret
    password: "" # TODO: get from secret

volumes:
  - name: crypto-keys
    size: 1Gi
    storageClassName: local-path
    hostPath: "/datadisk/pvc/crypto-keys"
  - name: models-registry
    size: 20Gi
    storageClassName: local-path
    hostPath: "/datadisk/pvc/models-registry"
  - name: add-dir-budmo
    size: 20Gi
    storageClassName: local-path
    hostPath: "/datadisk/add_model_dir"
  - name: static-dir
    size: 20Gi
    storageClassName: local-path
    hostPath: "/datadisk/pvc/static-dir"

prometheus-node-exporter:
  service:
    type: ClusterIP
    port: 9231
    targetPort: 9100

traefik:
  additionalMiddleware:
    prometheus-basic-auth:
      basicAuth:
        secret: prometheus-basic-auth
        headerField: "X-Auth"

prometheus:
  enabled: true
  service:
    type: NodePort
    nodePort: 30090
  ingress:
    enabled: true
    hosts:
     - "" # TODO: get from secret
    annotations:
     traefik.ingress.kubernetes.io/router.middlewares: monitoring-prometheus-basic-auth@kubernetescrd
  extraSecret:
    name: prometheus-basic-auth
    data:
     auth: |
       admin:$apr1$fbU3o12u$WgueOb4gP/Dfld7IOk7Sa1
  prometheusSpec:
    retention: 7d
    enableRemoteWriteReceiver: true
    externalLabels:
      cluster: "main-cluster"
    thanosService:
      enabled: true
    thanosSidecarSpec:
      image: quay.io/thanos/thanos:v0.31.0
      objectStorageConfig:
        key: thanos.yaml
        name: thanos-objstore-config
    resources:
      requests:
        memory: "2Gi"
        cpu: "500m"
      limits:
        memory: "4Gi"
        cpu: "1000m"
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
    # serviceMonitorSelector: {}
    # remoteWriteAuthenticationSecret:
    #   name: remote-write-auth

alertmanager:
  enabled: true
  alertmanagerSpec:
    resources:
      requests:
        memory: "64Mi"
        cpu: "100m"
      limits:
        memory: "128Mi"
        cpu: "200m"

grafana:
  enabled: true
  adminPassword: "" # TODO: get from secret
  ingress:
    enabled: true
    hosts:
     - "" # TODO: get from secret
  service:
    type: NodePort
    nodePort: 30080
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  persistence:
    enabled: true
    size: 5Gi

thanosRuler:
  enabled: true
  service:
    type: NodePort
    nodePort: 30903
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"

thanosQueryFrontend:
  enabled: true
  service:
    type: NodePort
    nodePort: 30902
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"

thanosStore:
  enabled: true
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"

thanosCompactor:
  enabled: true
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"
  retentionResolution5m: 30d

networkPolicy:
  enabled: true


redisStack:
  enabled: true
  replicaCount: 1

  image:
    repository: redis/redis-stack
    tag: latest
    pullPolicy: IfNotPresent

  auth:
    password: "" # TODO: get from secret

  persistence:
    enabled: true
    storageClass: "standard"
    accessMode: ReadWriteOnce
    size: 1Gi
  
  service:
    type: ClusterIP
    port: 6379

  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  command:
    - /bin/sh
    - -c
    - redis-server --requirepass "${REDIS_PASSWORD}" --port 6379 --loadmodule /opt/redis-stack/lib/redisearch.so --loadmodule /opt/redis-stack/lib/rejson.so

  sysctls:
    net.core.somaxconn: 1024

  healthcheck:
    test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

keycloak:
  image: quay.io/keycloak/keycloak:24.0.1
  replicas: 1
  adminUser: admin
  adminPassword: "" # TODO: get from secret
  realm: |
    {
      "realm": "myrealm",
      "enabled": true,
      "id": "myrealm",
      "users": [],
      "clients": []
    }
  proxy: edge
  hostname: "" # TODO: get from secret
  extraEnvVars:
    - name: KC_HOSTNAME_STRICT_HTTPS
      value: "true"
    - name: KC_HTTP_ENABLED
      value: "true"
  database:
    url: jdbc:postgresql://postgres:5432/keycloak
    username: keycloak
    password: "" # TODO: get from secret
  postgres:
    enabled: true
    image: postgres:15
    username: keycloak
    password: "" # TODO: get from secret
    db: keycloak
